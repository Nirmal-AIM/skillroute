{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\n// Use a fallback connection string if DATABASE_URL is not set\nconst databaseUrl = process.env.DATABASE_URL || process.env.REPLIT_DB_URL;\n\nif (!databaseUrl) {\n  console.warn(\"Warning: No database URL found. Using fallback connection.\");\n  // Use a fallback that won't crash the app\n  const fallbackUrl = \"postgresql://user:password@localhost:5432/fallback_db\";\n  process.env.DATABASE_URL = fallbackUrl;\n}\n\nexport const pool = new Pool({ connectionString: databaseUrl || process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":770},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage, initializeDatabase } from \"./storage\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize database with sample data\n  await initializeDatabase();\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":2195},"server/openai.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"./storage\";\nimport type { User, UserSkill, Skill, Course } from \"@shared/schema\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"default_key\" \n});\n\ninterface SkillGapAnalysis {\n  skillGaps: Array<{\n    skillName: string;\n    currentLevel: string;\n    requiredLevel: string;\n    priority: 'high' | 'medium' | 'low';\n    recommendations: string[];\n  }>;\n  overallScore: number;\n  strengths: string[];\n  improvementAreas: string[];\n  careerReadiness: number;\n}\n\ninterface LearningPathway {\n  title: string;\n  description: string;\n  duration: string;\n  difficulty: string;\n  courses: Array<{\n    title: string;\n    provider: string;\n    duration: string;\n    nsqfLevel: number;\n    priority: number;\n  }>;\n  milestones: string[];\n  expectedOutcomes: string[];\n}\n\nexport class AILearningService {\n  // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n  private model = \"gpt-5\";\n\n  async generateCareerGuidance(prompt: string): Promise<string> {\n    try {\n      const completion = await openai.chat.completions.create({\n        model: this.model,\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are Vidya Varadhi, a knowledgeable and supportive career guidance assistant specializing in Indian vocational education and NSQF-aligned career paths. You help learners navigate their career journey with empathy and practical advice.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 500,\n        temperature: 0.7\n      });\n\n      return completion.choices[0]?.message?.content || \"I'm here to help with your career questions. Please tell me more about what you'd like to explore.\";\n    } catch (error) {\n      console.error(\"OpenAI API error:\", error);\n      throw new Error(\"Failed to generate career guidance\");\n    }\n  }\n\n  async analyzeSkillGap(\n    user: User,\n    userSkills: UserSkill[],\n    availableSkills: Skill[],\n    targetRole: string\n  ): Promise<SkillGapAnalysis> {\n    try {\n      const prompt = `\n        Analyze the skill gap for a learner aspiring to become a ${targetRole}.\n        \n        User Profile:\n        - Academic Background: ${user.academicBackground || 'Not specified'}\n        - Current Role: ${user.currentRole || 'Not specified'}\n        - Career Aspirations: ${user.careerAspirations || 'Not specified'}\n        - Learning Pace: ${user.learningPace || 'moderate'}\n        \n        Current Skills:\n        ${userSkills.map(skill => {\n          const skillDetails = availableSkills.find(s => s.id === skill.skillId);\n          return `- ${skillDetails?.name || 'Unknown'}: ${skill.proficiencyLevel} (${skill.proficiencyScore}/100)`;\n        }).join('\\n')}\n        \n        Available Skills in System:\n        ${availableSkills.map(skill => `- ${skill.name} (${skill.category})`).join('\\n')}\n        \n        Please provide a comprehensive skill gap analysis in JSON format with the following structure:\n        {\n          \"skillGaps\": [\n            {\n              \"skillName\": \"string\",\n              \"currentLevel\": \"beginner|intermediate|advanced|none\",\n              \"requiredLevel\": \"beginner|intermediate|advanced\",\n              \"priority\": \"high|medium|low\",\n              \"recommendations\": [\"string\"]\n            }\n          ],\n          \"overallScore\": number (0-100),\n          \"strengths\": [\"string\"],\n          \"improvementAreas\": [\"string\"],\n          \"careerReadiness\": number (0-100)\n        }\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: this.model,\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert career counselor and skill assessment specialist. Provide detailed, actionable skill gap analysis for vocational training aligned with NSQF standards.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const analysis = JSON.parse(response.choices[0].message.content || '{}');\n      \n      // Save analysis to database\n      await storage.saveAIAnalysis({\n        userId: user.id,\n        analysisType: 'skill_gap',\n        input: {\n          userProfile: {\n            academicBackground: user.academicBackground,\n            currentRole: user.currentRole,\n            careerAspirations: user.careerAspirations,\n          },\n          targetRole,\n          currentSkills: userSkills.length\n        },\n        output: analysis,\n        confidence: 0.85\n      });\n\n      return analysis as SkillGapAnalysis;\n    } catch (error) {\n      console.error(\"Error analyzing skill gap:\", error);\n      throw new Error(\"Failed to analyze skill gap: \" + (error as Error).message);\n    }\n  }\n\n  async generateLearningPathway(\n    user: User,\n    skillGapAnalysis: SkillGapAnalysis,\n    availableCourses: Course[],\n    targetRole: string\n  ): Promise<LearningPathway> {\n    try {\n      const prompt = `\n        Generate a personalized learning pathway for a ${targetRole} aspirant.\n        \n        User Profile:\n        - Academic Background: ${user.academicBackground || 'Not specified'}\n        - Learning Pace: ${user.learningPace || 'moderate'}\n        - Career Aspirations: ${user.careerAspirations || 'Not specified'}\n        \n        Skill Gap Analysis Results:\n        - Overall Score: ${skillGapAnalysis.overallScore}/100\n        - Career Readiness: ${skillGapAnalysis.careerReadiness}/100\n        - Key Skill Gaps: ${skillGapAnalysis.skillGaps.map(gap => \n          `${gap.skillName} (${gap.currentLevel} → ${gap.requiredLevel}, Priority: ${gap.priority})`\n        ).join(', ')}\n        - Strengths: ${skillGapAnalysis.strengths.join(', ')}\n        - Improvement Areas: ${skillGapAnalysis.improvementAreas.join(', ')}\n        \n        Available Courses:\n        ${availableCourses.slice(0, 50).map(course => \n          `- ${course.title} by ${course.provider} (${course.skillLevel}, NSQF Level ${course.nsqfLevel}, Duration: ${course.duration})`\n        ).join('\\n')}\n        \n        Create a comprehensive learning pathway in JSON format:\n        {\n          \"title\": \"string\",\n          \"description\": \"string\",\n          \"duration\": \"string (e.g., '6 months')\",\n          \"difficulty\": \"beginner|intermediate|advanced\",\n          \"courses\": [\n            {\n              \"title\": \"string\",\n              \"provider\": \"string\", \n              \"duration\": \"string\",\n              \"nsqfLevel\": number,\n              \"priority\": number (1-10, higher is more important)\n            }\n          ],\n          \"milestones\": [\"string\"],\n          \"expectedOutcomes\": [\"string\"]\n        }\n        \n        Ensure the pathway is:\n        1. Aligned with NSQF standards\n        2. Progressive (builds from basics to advanced)\n        3. Industry-relevant\n        4. Realistic for the user's pace and background\n        5. Focused on high-priority skill gaps\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: this.model,\n        messages: [\n          {\n            role: \"system\", \n            content: \"You are an expert learning path designer with deep knowledge of NSQF framework and industry requirements. Create practical, achievable learning pathways.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const pathway = JSON.parse(response.choices[0].message.content || '{}');\n\n      // Save pathway recommendation to database\n      await storage.saveAIAnalysis({\n        userId: user.id,\n        analysisType: 'pathway_recommendation',\n        input: {\n          targetRole,\n          skillGapAnalysis: {\n            overallScore: skillGapAnalysis.overallScore,\n            careerReadiness: skillGapAnalysis.careerReadiness,\n            skillGapsCount: skillGapAnalysis.skillGaps.length\n          },\n          availableCoursesCount: availableCourses.length\n        },\n        output: pathway,\n        confidence: 0.90\n      });\n\n      return pathway as LearningPathway;\n    } catch (error) {\n      console.error(\"Error generating learning pathway:\", error);\n      throw new Error(\"Failed to generate learning pathway: \" + (error as Error).message);\n    }\n  }\n\n  async generateCareerGuidance(\n    user: User,\n    industryTrends: any[],\n    userProgress: { completedCourses: number; totalSkills: number; averageScore: number }\n  ): Promise<{\n    careerAdvice: string[];\n    industryInsights: string[];\n    nextSteps: string[];\n    salaryExpectations: string;\n    jobMarketOutlook: string;\n  }> {\n    try {\n      const prompt = `\n        Provide comprehensive career guidance for a learner.\n        \n        User Profile:\n        - Academic Background: ${user.academicBackground || 'Not specified'}\n        - Current Role: ${user.currentRole || 'Not specified'}  \n        - Career Aspirations: ${user.careerAspirations || 'Not specified'}\n        - Location Context: ${user.socioEconomicContext || 'Not specified'}\n        \n        Learning Progress:\n        - Completed Courses: ${userProgress.completedCourses}\n        - Total Skills Assessed: ${userProgress.totalSkills}\n        - Average Skill Score: ${userProgress.averageScore}/100\n        \n        Industry Trends:\n        ${industryTrends.slice(0, 10).map(trend => \n          `- ${trend.skillName} in ${trend.sector}: ${trend.demandGrowth}% growth, Salary: ${trend.salaryRange}, Jobs: ${trend.jobCount}`\n        ).join('\\n')}\n        \n        Provide career guidance in JSON format:\n        {\n          \"careerAdvice\": [\"string\"],\n          \"industryInsights\": [\"string\"], \n          \"nextSteps\": [\"string\"],\n          \"salaryExpectations\": \"string\",\n          \"jobMarketOutlook\": \"string\"\n        }\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: this.model,\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a senior career counselor with expertise in Indian job market trends and vocational training. Provide practical, actionable career guidance.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const guidance = JSON.parse(response.choices[0].message.content || '{}');\n\n      await storage.saveAIAnalysis({\n        userId: user.id,\n        analysisType: 'career_guidance',\n        input: {\n          userProgress,\n          industryTrendsCount: industryTrends.length\n        },\n        output: guidance,\n        confidence: 0.88\n      });\n\n      return guidance;\n    } catch (error) {\n      console.error(\"Error generating career guidance:\", error);\n      throw new Error(\"Failed to generate career guidance: \" + (error as Error).message);\n    }\n  }\n\n  async recommendCourses(\n    user: User,\n    userSkills: UserSkill[],\n    availableCourses: Course[],\n    limit: number = 10\n  ): Promise<Course[]> {\n    try {\n      const prompt = `\n        Recommend the most suitable courses for this learner.\n        \n        User Profile:\n        - Academic Background: ${user.academicBackground || 'Not specified'}\n        - Career Aspirations: ${user.careerAspirations || 'Not specified'}\n        - Learning Pace: ${user.learningPace || 'moderate'}\n        \n        Current Skills:\n        ${userSkills.map(skill => `- Skill ID ${skill.skillId}: ${skill.proficiencyLevel} (${skill.proficiencyScore}/100)`).join('\\n')}\n        \n        Available Courses (provide course IDs for recommendations):\n        ${availableCourses.map(course => \n          `ID: ${course.id} - ${course.title} (${course.skillLevel}, NSQF ${course.nsqfLevel}, ${course.category})`\n        ).join('\\n')}\n        \n        Return JSON with array of recommended course IDs in order of relevance:\n        {\n          \"recommendedCourseIds\": [\"course_id_1\", \"course_id_2\", ...],\n          \"reasoning\": \"Brief explanation of recommendation logic\"\n        }\n        \n        Limit to ${limit} recommendations.\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: this.model,\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an AI learning advisor. Recommend courses that best match the user's skill level, career goals, and learning preferences.\"\n          },\n          {\n            role: \"user\", \n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      const recommendedIds = result.recommendedCourseIds || [];\n      \n      // Filter and return actual course objects\n      return availableCourses.filter(course => recommendedIds.includes(course.id));\n    } catch (error) {\n      console.error(\"Error recommending courses:\", error);\n      // Fallback to simple filtering if AI fails\n      return availableCourses\n        .filter(course => {\n          if (user.careerAspirations && course.description) {\n            return course.description.toLowerCase().includes(user.careerAspirations.toLowerCase());\n          }\n          return true;\n        })\n        .slice(0, limit);\n    }\n  }\n}\n\nexport const aiService = new AILearningService();\n","size_bytes":13469},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Handle missing REPLIT_DOMAINS for WebContainer environment\nconst REPLIT_DOMAINS = process.env.REPLIT_DOMAINS || \"localhost:5000\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  console.warn(\"REPLIT_DOMAINS not set, using fallback for development\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of (process.env.REPLIT_DOMAINS || REPLIT_DOMAINS).split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4372},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticateJWT, requireRole, requireSurveyCompletion, type AuthRequest } from \"./auth\";\nimport { aiService } from \"./openai\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertCourseSchema, insertPathwaySchema, updateProfileSchema } from \"@shared/schema\";\nimport authRoutes from \"./authRoutes\";\nimport surveyRoutes from \"./surveyRoutes\";\nimport chatbotRoutes from \"./chatbotRoutes\";\nimport cookieParser from \"cookie-parser\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Cookie parser for JWT tokens\n  app.use(cookieParser());\n  \n  // Auth routes\n  app.use('/api/auth', authRoutes);\n  \n  // Survey routes\n  app.use('/api/survey', surveyRoutes);\n  \n  // Chatbot routes\n  app.use('/api/chatbot', chatbotRoutes);\n\n  // User info route (handled by authRoutes now, but keeping for compatibility)\n  app.get('/api/user', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const user = await storage.getUserById(req.user!.id);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Profile routes\n  app.put('/api/profile', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      // Use safe profile schema to prevent privilege escalation\n      const updateData = updateProfileSchema.parse(req.body);\n      \n      const updatedUser = await storage.updateUser(userId, updateData);\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(400).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Skills routes\n  app.get('/api/skills', async (req, res) => {\n    try {\n      const { category } = req.query;\n      const skills = category \n        ? await storage.getSkillsByCategory(category as string)\n        : await storage.getSkills();\n      res.json(skills);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch skills\" });\n    }\n  });\n\n  app.get('/api/user/skills', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const userSkills = await storage.getUserSkills(userId);\n      res.json(userSkills);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user skills\" });\n    }\n  });\n\n  app.post('/api/user/skills', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { skillId, proficiencyLevel, proficiencyScore } = req.body;\n      \n      const userSkill = await storage.updateUserSkill(userId, skillId, proficiencyLevel, proficiencyScore);\n      res.json(userSkill);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user skill\" });\n    }\n  });\n\n  // Courses routes\n  app.get('/api/courses', async (req, res) => {\n    try {\n      const { category, skillLevel, nsqfLevel, search } = req.query;\n      \n      const filters: any = {};\n      if (category && category !== '') filters.category = category as string;\n      if (skillLevel && skillLevel !== '') filters.skillLevel = skillLevel as string;  \n      if (nsqfLevel && nsqfLevel !== '') filters.nsqfLevel = nsqfLevel as string;\n      if (search && search !== '') filters.search = search as string;\n      \n      const courses = await storage.getCourses(filters);\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get('/api/courses/:id', async (req, res) => {\n    try {\n      const course = await storage.getCourseById(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch course\" });\n    }\n  });\n\n  // AI-powered recommendations\n  app.post('/api/ai/skill-analysis', authenticateJWT, requireSurveyCompletion, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { targetRole } = req.body;\n      \n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const userSkills = await storage.getUserSkills(userId);\n      const availableSkills = await storage.getSkills();\n      \n      const analysis = await aiService.analyzeSkillGap(user, userSkills, availableSkills, targetRole);\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error in skill analysis:\", error);\n      res.status(500).json({ message: \"Failed to analyze skills\" });\n    }\n  });\n\n  app.post('/api/ai/generate-pathway', authenticateJWT, requireSurveyCompletion, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { skillGapAnalysis, targetRole } = req.body;\n      \n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const availableCourses = await storage.getCourses();\n      const pathway = await aiService.generateLearningPathway(user, skillGapAnalysis, availableCourses, targetRole);\n      \n      // Save the pathway\n      const savedPathway = await storage.createPathway({\n        userId,\n        title: pathway.title,\n        description: pathway.description,\n        targetRole,\n        estimatedDuration: pathway.duration,\n        difficulty: pathway.difficulty,\n        aiGenerated: true,\n        courseIds: pathway.courses.map(c => c.title) // Store course titles for now\n      });\n      \n      res.json({ pathway, savedPathway });\n    } catch (error) {\n      console.error(\"Error generating pathway:\", error);\n      res.status(500).json({ message: \"Failed to generate pathway\" });\n    }\n  });\n\n  app.get('/api/ai/course-recommendations', authenticateJWT, requireSurveyCompletion, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const limit = parseInt(req.query.limit as string) || 10;\n      \n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const userSkills = await storage.getUserSkills(userId);\n      const availableCourses = await storage.getCourses();\n      \n      const recommendations = await aiService.recommendCourses(user, userSkills, availableCourses, limit);\n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error getting course recommendations:\", error);\n      res.status(500).json({ message: \"Failed to get recommendations\" });\n    }\n  });\n\n  // Learning pathways\n  app.get('/api/pathways', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const pathways = await storage.getUserPathways(userId);\n      res.json(pathways);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pathways\" });\n    }\n  });\n\n  app.post('/api/pathways', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const pathwayData = insertPathwaySchema.parse({ ...req.body, userId });\n      \n      const pathway = await storage.createPathway(pathwayData);\n      res.json(pathway);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create pathway\" });\n    }\n  });\n\n  // Enrollments\n  app.get('/api/enrollments', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const enrollments = await storage.getUserEnrollments(userId);\n      res.json(enrollments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch enrollments\" });\n    }\n  });\n\n  app.post('/api/enrollments', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { courseId } = req.body;\n      \n      const enrollment = await storage.createEnrollment({ userId, courseId });\n      res.json(enrollment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create enrollment\" });\n    }\n  });\n\n  app.put('/api/enrollments/:courseId/progress', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { courseId } = req.params;\n      const { progress } = req.body;\n      \n      const enrollment = await storage.updateEnrollmentProgress(userId, courseId, progress);\n      res.json(enrollment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  // Achievements\n  app.get('/api/achievements', async (req, res) => {\n    try {\n      const achievements = await storage.getAchievements();\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.get('/api/user/achievements', authenticateJWT, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const achievements = await storage.getUserAchievements(userId);\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  // Industry trends\n  app.get('/api/industry-trends', async (req, res) => {\n    try {\n      const { sector } = req.query;\n      const trends = await storage.getIndustryTrends(sector as string);\n      res.json(trends);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch industry trends\" });\n    }\n  });\n\n  // Dashboard analytics\n  app.get('/api/dashboard/analytics', authenticateJWT, requireSurveyCompletion, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      const [enrollments, pathways, userSkills, achievements] = await Promise.all([\n        storage.getUserEnrollments(userId),\n        storage.getUserPathways(userId),\n        storage.getUserSkills(userId),\n        storage.getUserAchievements(userId)\n      ]);\n\n      const completedCourses = enrollments.filter(e => e.status === 'completed').length;\n      const inProgressCourses = enrollments.filter(e => e.status === 'in_progress').length;\n      const averageProgress = enrollments.length > 0 \n        ? enrollments.reduce((sum, e) => sum + (e.progress || 0), 0) / enrollments.length \n        : 0;\n      const averageSkillScore = userSkills.length > 0\n        ? userSkills.reduce((sum, s) => sum + (s.proficiencyScore || 0), 0) / userSkills.length\n        : 0;\n\n      res.json({\n        totalEnrollments: enrollments.length,\n        completedCourses,\n        inProgressCourses,\n        totalPathways: pathways.length,\n        totalSkills: userSkills.length,\n        badgesEarned: achievements.length,\n        averageProgress: Math.round(averageProgress),\n        averageSkillScore: Math.round(averageSkillScore),\n        studyTimeThisMonth: Math.floor(Math.random() * 50) + 20, // Placeholder - would be tracked\n        industryAlignment: Math.round(averageSkillScore * 0.85)\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11499},"server/storage.ts":{"content":"import {\n  users,\n  skills,\n  courses,\n  learningPathways,\n  enrollments,\n  achievements,\n  userAchievements,\n  userSkills,\n  industryTrends,\n  aiAnalysis,\n  learnerSurveys,\n  ncvetQualifications,\n  trainingPrograms,\n  jobRoles,\n  type User,\n  type UpsertUser,\n  type Skill,\n  type InsertSkill,\n  type Course,\n  type InsertCourse,\n  type LearningPathway,\n  type InsertPathway,\n  type Enrollment,\n  type InsertEnrollment,\n  type Achievement,\n  type UserSkill,\n  type IndustryTrend,\n  type AIAnalysis,\n  type LearnerSurvey,\n  type InsertSurvey,\n  type NCVETQualification,\n  type TrainingProgram,\n  type JobRole,\n  type RegisterUser,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, ilike, inArray, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations for authentication\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(userData: RegisterUser & { passwordHash: string }): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Skills operations\n  getSkills(): Promise<Skill[]>;\n  getSkillsByCategory(category: string): Promise<Skill[]>;\n  createSkill(skill: InsertSkill): Promise<Skill>;\n  getUserSkills(userId: string): Promise<UserSkill[]>;\n  updateUserSkill(userId: string, skillId: string, proficiencyLevel: string, proficiencyScore: number): Promise<UserSkill>;\n\n  // Courses operations\n  getCourses(filters?: { category?: string; skillLevel?: string; nsqfLevel?: number; search?: string }): Promise<Course[]>;\n  getCourseById(id: string): Promise<Course | undefined>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  searchCourses(query: string): Promise<Course[]>;\n\n  // Learning pathways\n  getUserPathways(userId: string): Promise<LearningPathway[]>;\n  createPathway(pathway: InsertPathway): Promise<LearningPathway>;\n  updatePathwayProgress(id: string, progress: number): Promise<LearningPathway | undefined>;\n\n  // Enrollments\n  getUserEnrollments(userId: string): Promise<Enrollment[]>;\n  createEnrollment(enrollment: InsertEnrollment): Promise<Enrollment>;\n  updateEnrollmentProgress(userId: string, courseId: string, progress: number): Promise<Enrollment | undefined>;\n\n  // Achievements\n  getAchievements(): Promise<Achievement[]>;\n  getUserAchievements(userId: string): Promise<Achievement[]>;\n  awardAchievement(userId: string, achievementId: string): Promise<void>;\n\n  // Industry trends\n  getIndustryTrends(sector?: string): Promise<IndustryTrend[]>;\n\n  // AI Analysis\n  saveAIAnalysis(analysis: Omit<AIAnalysis, 'id' | 'createdAt'>): Promise<AIAnalysis>;\n  getAIAnalysis(userId: string, analysisType?: string): Promise<AIAnalysis[]>;\n\n  // Survey operations\n  getUserSurvey(userId: string): Promise<LearnerSurvey | undefined>;\n  createSurvey(survey: InsertSurvey): Promise<LearnerSurvey>;\n  updateSurvey(userId: string, updates: Partial<InsertSurvey>): Promise<LearnerSurvey | undefined>;\n\n  // NCVET/NSQF operations\n  getQualifications(filters?: { sector?: string; nsqfLevel?: number; search?: string }): Promise<NCVETQualification[]>;\n  getTrainingPrograms(filters?: { sector?: string; nsqfLevel?: number; isCertified?: boolean }): Promise<TrainingProgram[]>;\n  getJobRoles(filters?: { sector?: string; nsqfLevel?: number }): Promise<JobRole[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations for authentication\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: RegisterUser & { passwordHash: string }): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        role: userData.role,\n        passwordHash: userData.passwordHash,\n        surveyCompleted: false,\n        failedLoginCount: 0,\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Skills operations\n  async getSkills(): Promise<Skill[]> {\n    return await db.select().from(skills).orderBy(skills.name);\n  }\n\n  async getSkillsByCategory(category: string): Promise<Skill[]> {\n    return await db.select().from(skills).where(eq(skills.category, category)).orderBy(skills.name);\n  }\n\n  async createSkill(skill: InsertSkill): Promise<Skill> {\n    const [newSkill] = await db.insert(skills).values(skill).returning();\n    return newSkill;\n  }\n\n  async getUserSkills(userId: string): Promise<UserSkill[]> {\n    return await db.select().from(userSkills).where(eq(userSkills.userId, userId));\n  }\n\n  async updateUserSkill(userId: string, skillId: string, proficiencyLevel: string, proficiencyScore: number): Promise<UserSkill> {\n    const [updated] = await db\n      .insert(userSkills)\n      .values({ userId, skillId, proficiencyLevel, proficiencyScore })\n      .onConflictDoUpdate({\n        target: [userSkills.userId, userSkills.skillId],\n        set: { proficiencyLevel, proficiencyScore, lastAssessed: new Date() }\n      })\n      .returning();\n    return updated;\n  }\n\n  // Courses operations\n  async getCourses(filters: any = {}): Promise<Course[]> {\n    try {\n      let query = db.select().from(courses);\n      let whereConditions = [];\n\n      if (filters.category && filters.category !== '') {\n        whereConditions.push(eq(courses.category, filters.category));\n      }\n      if (filters.skillLevel && filters.skillLevel !== '') {\n        whereConditions.push(eq(courses.skillLevel, filters.skillLevel));\n      }\n      if (filters.nsqfLevel && filters.nsqfLevel !== '') {\n        whereConditions.push(eq(courses.nsqfLevel, parseInt(filters.nsqfLevel)));\n      }\n      if (filters.search && filters.search !== '') {\n        whereConditions.push(\n          sql`(LOWER(${courses.title}) LIKE LOWER(${`%${filters.search}%`}) OR \n               LOWER(${courses.description}) LIKE LOWER(${`%${filters.search}%`}) OR\n               LOWER(${courses.provider}) LIKE LOWER(${`%${filters.search}%`}))`\n        );\n      }\n\n      if (whereConditions.length > 0) {\n        query = query.where(and(...whereConditions));\n      }\n\n      return await query.orderBy(desc(courses.createdAt));\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      return [];\n    }\n  }\n\n  async getCourseById(id: string): Promise<Course | undefined> {\n    const [course] = await db.select().from(courses).where(eq(courses.id, id));\n    return course;\n  }\n\n  async createCourse(course: InsertCourse): Promise<Course> {\n    const [newCourse] = await db.insert(courses).values(course).returning();\n    return newCourse;\n  }\n\n  async searchCourses(query: string): Promise<Course[]> {\n    return await db\n      .select()\n      .from(courses)\n      .where(\n        or(\n          ilike(courses.title, `%${query}%`),\n          ilike(courses.description, `%${query}%`),\n          ilike(courses.provider, `%${query}%`)\n        )\n      )\n      .orderBy(desc(courses.createdAt));\n  }\n\n  // Learning pathways\n  async getUserPathways(userId: string): Promise<LearningPathway[]> {\n    return await db\n      .select()\n      .from(learningPathways)\n      .where(eq(learningPathways.userId, userId))\n      .orderBy(desc(learningPathways.createdAt));\n  }\n\n  async createPathway(pathway: InsertPathway): Promise<LearningPathway> {\n    const [newPathway] = await db.insert(learningPathways).values(pathway).returning();\n    return newPathway;\n  }\n\n  async updatePathwayProgress(id: string, progress: number): Promise<LearningPathway | undefined> {\n    const [updated] = await db\n      .update(learningPathways)\n      .set({ progress, updatedAt: new Date() })\n      .where(eq(learningPathways.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Enrollments\n  async getUserEnrollments(userId: string): Promise<Enrollment[]> {\n    return await db\n      .select()\n      .from(enrollments)\n      .where(eq(enrollments.userId, userId))\n      .orderBy(desc(enrollments.enrolledAt));\n  }\n\n  async createEnrollment(enrollment: InsertEnrollment): Promise<Enrollment> {\n    const [newEnrollment] = await db.insert(enrollments).values(enrollment).returning();\n    return newEnrollment;\n  }\n\n  async updateEnrollmentProgress(userId: string, courseId: string, progress: number): Promise<Enrollment | undefined> {\n    const [updated] = await db\n      .update(enrollments)\n      .set({ \n        progress,\n        status: progress >= 100 ? 'completed' : 'in_progress',\n        completedAt: progress >= 100 ? new Date() : null\n      })\n      .where(and(eq(enrollments.userId, userId), eq(enrollments.courseId, courseId)))\n      .returning();\n    return updated;\n  }\n\n  // Achievements\n  async getAchievements(): Promise<Achievement[]> {\n    return await db.select().from(achievements).orderBy(achievements.title);\n  }\n\n  async getUserAchievements(userId: string): Promise<Achievement[]> {\n    const results = await db\n      .select({\n        id: achievements.id,\n        title: achievements.title,\n        description: achievements.description,\n        icon: achievements.icon,\n        category: achievements.category,\n        points: achievements.points,\n        requirements: achievements.requirements,\n        createdAt: achievements.createdAt,\n      })\n      .from(userAchievements)\n      .innerJoin(achievements, eq(userAchievements.achievementId, achievements.id))\n      .where(eq(userAchievements.userId, userId));\n\n    return results;\n  }\n\n  async awardAchievement(userId: string, achievementId: string): Promise<void> {\n    await db.insert(userAchievements).values({ userId, achievementId }).onConflictDoNothing();\n  }\n\n  // Industry trends\n  async getIndustryTrends(sector?: string): Promise<IndustryTrend[]> {\n    const query = db.select().from(industryTrends);\n    const finalQuery = sector \n      ? query.where(eq(industryTrends.sector, sector))\n      : query;\n\n    return await finalQuery.orderBy(desc(industryTrends.updatedAt));\n  }\n\n  // AI Analysis\n  async saveAIAnalysis(analysis: Omit<AIAnalysis, 'id' | 'createdAt'>): Promise<AIAnalysis> {\n    const [saved] = await db.insert(aiAnalysis).values(analysis).returning();\n    return saved;\n  }\n\n  async getAIAnalysis(userId: string, analysisType?: string): Promise<AIAnalysis[]> {\n    const conditions = [eq(aiAnalysis.userId, userId)];\n\n    if (analysisType) {\n      conditions.push(eq(aiAnalysis.analysisType, analysisType));\n    }\n\n    return await db\n      .select()\n      .from(aiAnalysis)\n      .where(and(...conditions))\n      .orderBy(desc(aiAnalysis.createdAt));\n  }\n\n  // Survey operations\n  async getUserSurvey(userId: string): Promise<LearnerSurvey | undefined> {\n    const [survey] = await db.select().from(learnerSurveys).where(eq(learnerSurveys.userId, userId));\n    return survey;\n  }\n\n  async createSurvey(survey: InsertSurvey): Promise<LearnerSurvey> {\n    const [newSurvey] = await db.insert(learnerSurveys).values(survey).returning();\n    // Mark user as having completed survey\n    await this.updateUser(survey.userId, { surveyCompleted: true });\n    return newSurvey;\n  }\n\n  async updateSurvey(userId: string, updates: Partial<InsertSurvey>): Promise<LearnerSurvey | undefined> {\n    const [updated] = await db\n      .update(learnerSurveys)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(learnerSurveys.userId, userId))\n      .returning();\n    return updated;\n  }\n\n  // NCVET/NSQF operations\n  async getQualifications(filters: any = {}): Promise<NCVETQualification[]> {\n    let query = db.select().from(ncvetQualifications);\n    let whereConditions = [];\n\n    if (filters.sector) {\n      whereConditions.push(eq(ncvetQualifications.sector, filters.sector));\n    }\n    if (filters.nsqfLevel) {\n      whereConditions.push(eq(ncvetQualifications.nsqfLevel, filters.nsqfLevel));\n    }\n    if (filters.search) {\n      whereConditions.push(\n        or(\n          ilike(ncvetQualifications.title, `%${filters.search}%`),\n          ilike(ncvetQualifications.code, `%${filters.search}%`),\n          ilike(ncvetQualifications.description, `%${filters.search}%`)\n        )\n      );\n    }\n\n    if (whereConditions.length > 0) {\n      query = query.where(and(...whereConditions));\n    }\n\n    return await query.orderBy(ncvetQualifications.title);\n  }\n\n  async getTrainingPrograms(filters: any = {}): Promise<TrainingProgram[]> {\n    let query = db.select().from(trainingPrograms);\n    let whereConditions = [];\n\n    if (filters.sector) {\n      whereConditions.push(eq(trainingPrograms.sector, filters.sector));\n    }\n    if (filters.nsqfLevel) {\n      whereConditions.push(eq(trainingPrograms.nsqfLevel, filters.nsqfLevel));\n    }\n    if (filters.isCertified !== undefined) {\n      whereConditions.push(eq(trainingPrograms.isCertified, filters.isCertified));\n    }\n\n    if (whereConditions.length > 0) {\n      query = query.where(and(...whereConditions));\n    }\n\n    return await query.orderBy(trainingPrograms.title);\n  }\n\n  async getJobRoles(filters: any = {}): Promise<JobRole[]> {\n    let query = db.select().from(jobRoles);\n    let whereConditions = [];\n\n    if (filters.sector) {\n      whereConditions.push(eq(jobRoles.sector, filters.sector));\n    }\n    if (filters.nsqfLevel) {\n      whereConditions.push(eq(jobRoles.nsqfLevel, filters.nsqfLevel));\n    }\n\n    if (whereConditions.length > 0) {\n      query = query.where(and(...whereConditions));\n    }\n\n    return await query.orderBy(jobRoles.title);\n  }\n\n  async initializeDatabase() {\n    console.log(\"Initializing database with sample data...\");\n\n    // Add NCVET qualifications\n    const sampleQualifications = [\n      { code: \"SSC/Q0101\", title: \"Assistant Beauty Therapist\", sector: \"Beauty & Wellness\", nsqfLevel: 4, description: \"Basic beauty therapy and skin care services\" },\n      { code: \"SSC/Q0201\", title: \"Field Technician Computing and Peripherals\", sector: \"IT-ITeS\", nsqfLevel: 4, description: \"Installation and maintenance of computer systems\" },\n      { code: \"AGR/Q0101\", title: \"Organic Grower\", sector: \"Agriculture\", nsqfLevel: 4, description: \"Production of organic crops using sustainable methods\" },\n      { code: \"CSC/Q0101\", title: \"Assistant Systems Engineer Telecom Infrastructure\", sector: \"Telecom\", nsqfLevel: 5, description: \"Installation and maintenance of telecom infrastructure\" },\n      { code: \"HSS/Q0101\", title: \"Healthcare Assistant\", sector: \"Healthcare\", nsqfLevel: 4, description: \"Basic healthcare support and patient care\" },\n      { code: \"ASC/Q0101\", title: \"Two Wheeler Service Technician\", sector: \"Automotive\", nsqfLevel: 4, description: \"Service and repair of two-wheeler vehicles\" },\n      { code: \"FFS/Q0101\", title: \"Processing Technician Frozen Food\", sector: \"Food Processing\", nsqfLevel: 4, description: \"Processing and packaging of frozen food products\" },\n      { code: \"RSC/Q0101\", title: \"Retail Sales Associate\", sector: \"Retail\", nsqfLevel: 4, description: \"Customer service and sales in retail environments\" },\n      { code: \"TSC/Q0101\", title: \"Tour Guide\", sector: \"Tourism & Hospitality\", nsqfLevel: 4, description: \"Guiding tourists and managing travel itineraries\" },\n      { code: \"BFS/Q0101\", title: \"Relationship Manager Microfinance\", sector: \"Banking & Finance\", nsqfLevel: 5, description: \"Managing microfinance operations and client relationships\" }\n    ];\n\n    for (const qualification of sampleQualifications) {\n      try {\n        await db.insert(ncvetQualifications).values(qualification).onConflictDoNothing();\n      } catch (error) {\n        console.error(\"Error inserting qualification:\", error);\n      }\n    }\n\n    // Add NSQF-based training programs\n    const sampleTrainingPrograms = [\n      {\n        title: \"Digital Marketing Specialist Program\",\n        provider: \"Skill India Digital\",\n        mode: \"hybrid\",\n        duration: \"3 months\",\n        nsqfLevel: 5,\n        sector: \"IT-ITeS\",\n        qualificationCodes: [\"SSC/Q0201\"],\n        mappedSkillIds: [],\n        isCertified: true,\n        description: \"Comprehensive digital marketing training with SEO, SEM, and social media marketing\"\n      },\n      {\n        title: \"Basic Healthcare Support Training\",\n        provider: \"Healthcare Sector Skill Council\",\n        mode: \"offline\",\n        duration: \"6 months\",\n        nsqfLevel: 4,\n        sector: \"Healthcare\",\n        qualificationCodes: [\"HSS/Q0101\"],\n        mappedSkillIds: [],\n        isCertified: true,\n        description: \"Training for healthcare assistants in basic patient care and medical support\"\n      },\n      {\n        title: \"Automotive Service Technician Course\",\n        provider: \"Automotive Skill Development Council\",\n        mode: \"offline\",\n        duration: \"4 months\",\n        nsqfLevel: 4,\n        sector: \"Automotive\",\n        qualificationCodes: [\"ASC/Q0101\"],\n        mappedSkillIds: [],\n        isCertified: true,\n        description: \"Hands-on training for two-wheeler service and repair\"\n      },\n      {\n        title: \"Beauty Therapy Foundation Course\",\n        provider: \"Beauty & Wellness Sector Skill Council\",\n        mode: \"offline\",\n        duration: \"2 months\",\n        nsqfLevel: 4,\n        sector: \"Beauty & Wellness\",\n        qualificationCodes: [\"SSC/Q0101\"],\n        mappedSkillIds: [],\n        isCertified: true,\n        description: \"Basic beauty therapy skills including facial treatments and skin care\"\n      },\n      {\n        title: \"Agricultural Technology Program\",\n        provider: \"Agriculture Skill Council of India\",\n        mode: \"hybrid\",\n        duration: \"3 months\",\n        nsqfLevel: 4,\n        sector: \"Agriculture\",\n        qualificationCodes: [\"AGR/Q0101\"],\n        mappedSkillIds: [],\n        isCertified: true,\n        description: \"Modern agricultural techniques and organic farming methods\"\n      }\n    ];\n\n    for (const program of sampleTrainingPrograms) {\n      try {\n        await db.insert(trainingPrograms).values(program).onConflictDoNothing();\n      } catch (error) {\n        console.error(\"Error inserting training program:\", error);\n      }\n    }\n\n    // Add job roles aligned with NSQF/NCVET\n    const sampleJobRoles = [\n      {\n        title: \"Digital Marketing Executive\",\n        sector: \"IT-ITeS\",\n        nsqfLevel: 5,\n        qualificationCodes: [\"SSC/Q0201\"],\n        description: \"Responsible for digital marketing campaigns and online brand presence\",\n        salaryRange: \"₹3-6 LPA\",\n        demandLevel: \"high\"\n      },\n      {\n        title: \"Healthcare Assistant\",\n        sector: \"Healthcare\",\n        nsqfLevel: 4,\n        qualificationCodes: [\"HSS/Q0101\"],\n        description: \"Support healthcare professionals in patient care and medical procedures\",\n        salaryRange: \"₹2-4 LPA\",\n        demandLevel: \"high\"\n      },\n      {\n        title: \"Automotive Service Technician\",\n        sector: \"Automotive\",\n        nsqfLevel: 4,\n        qualificationCodes: [\"ASC/Q0101\"],\n        description: \"Service and repair vehicles, diagnose mechanical issues\",\n        salaryRange: \"₹2.5-5 LPA\",\n        demandLevel: \"medium\"\n      },\n      {\n        title: \"Beauty Therapist\",\n        sector: \"Beauty & Wellness\",\n        nsqfLevel: 4,\n        qualificationCodes: [\"SSC/Q0101\"],\n        description: \"Provide beauty treatments and skincare services to clients\",\n        salaryRange: \"₹2-4 LPA\",\n        demandLevel: \"medium\"\n      },\n      {\n        title: \"Agricultural Technician\",\n        sector: \"Agriculture\",\n        nsqfLevel: 4,\n        qualificationCodes: [\"AGR/Q0101\"],\n        description: \"Apply modern farming techniques and manage crop production\",\n        salaryRange: \"₹2-3.5 LPA\",\n        demandLevel: \"medium\"\n      }\n    ];\n\n    for (const jobRole of sampleJobRoles) {\n      try {\n        await db.insert(jobRoles).values(jobRole).onConflictDoNothing();\n      } catch (error) {\n        console.error(\"Error inserting job role:\", error);\n      }\n    }\n\n    // Add sample skills\n    const sampleSkills = [\n      { name: \"Python Programming\", category: \"Programming\", nsqfLevel: 5, description: \"Programming in Python language\", industryDemand: \"95.5\" },\n      { name: \"Data Analysis\", category: \"Analytics\", nsqfLevel: 6, description: \"Analyzing data using statistical methods\", industryDemand: \"92.3\" },\n      { name: \"Machine Learning\", category: \"AI/ML\", nsqfLevel: 7, description: \"Building and training ML models\", industryDemand: \"88.7\" },\n      { name: \"SQL Database Management\", category: \"Database\", nsqfLevel: 5, description: \"Managing relational databases\", industryDemand: \"89.2\" },\n      { name: \"JavaScript Development\", category: \"Programming\", nsqfLevel: 5, description: \"Frontend and backend JavaScript development\", industryDemand: \"91.8\" },\n    ];\n\n    for (const skill of sampleSkills) {\n      try {\n        await db.insert(skills).values(skill).onConflictDoNothing();\n      } catch (error) {\n        console.error(\"Error inserting skill:\", error);\n      }\n    }\n\n    // Add sample courses\n    const sampleCourses = [\n      {\n        title: \"Python for Data Analysis\",\n        description: \"Comprehensive introduction to data analysis using Python and pandas. Learn to manipulate, analyze, and visualize data effectively.\",\n        provider: \"DataCamp\",\n        duration: \"8 weeks\",\n        skillLevel: \"beginner\",\n        nsqfLevel: 4,\n        category: \"Data Analytics\",\n        isCertified: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        tags: [\"python\", \"data analysis\", \"pandas\", \"visualization\"]\n      },\n      {\n        title: \"Advanced Machine Learning\",\n        description: \"Deep dive into ML algorithms, neural networks, and practical implementation using TensorFlow and PyTorch.\",\n        provider: \"AI Academy\",\n        duration: \"12 weeks\",\n        skillLevel: \"advanced\",\n        nsqfLevel: 7,\n        category: \"AI & Machine Learning\",\n        isCertified: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        tags: [\"machine learning\", \"tensorflow\", \"neural networks\", \"ai\"]\n      },\n      {\n        title: \"Web Development Fundamentals\",\n        description: \"Learn HTML, CSS, JavaScript, and modern web development practices including responsive design and frameworks.\",\n        provider: \"CodeCraft\",\n        duration: \"10 weeks\",\n        skillLevel: \"intermediate\",\n        nsqfLevel: 5,\n        category: \"Software Development\",\n        isCertified: false,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1461749280684-dccba630e2f6?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        tags: [\"html\", \"css\", \"javascript\", \"responsive design\"]\n      },\n      {\n        title: \"Digital Marketing Strategy\",\n        description: \"Master digital marketing including SEO, social media marketing, content marketing, and analytics.\",\n        provider: \"Marketing Pro\",\n        duration: \"6 weeks\",\n        skillLevel: \"beginner\",\n        nsqfLevel: 3,\n        category: \"Digital Marketing\",\n        isCertified: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        tags: [\"seo\", \"social media\", \"content marketing\", \"analytics\"]\n      },\n      {\n        title: \"Cybersecurity Fundamentals\",\n        description: \"Introduction to cybersecurity principles, threat detection, and security best practices for organizations.\",\n        provider: \"SecureLearn\",\n        duration: \"8 weeks\",\n        skillLevel: \"intermediate\",\n        nsqfLevel: 6,\n        category: \"Cybersecurity\",\n        isCertified: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1550751827-4bd374c3f58b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        tags: [\"security\", \"threat detection\", \"network security\", \"compliance\"]\n      },\n      {\n        title: \"Cloud Computing with AWS\",\n        description: \"Learn Amazon Web Services including EC2, S3, Lambda, and cloud architecture best practices.\",\n        provider: \"CloudTech\",\n        duration: \"10 weeks\",\n        skillLevel: \"intermediate\",\n        nsqfLevel: 6,\n        category: \"Cloud Computing\",\n        isCertified: true,\n        thumbnailUrl: \"https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\",\n        tags: [\"aws\", \"cloud computing\", \"ec2\", \"lambda\"]\n      }\n    ];\n\n    for (const course of sampleCourses) {\n      try {\n        await db.insert(courses).values(course).onConflictDoNothing();\n      } catch (error) {\n        console.error(\"Error inserting course:\", error);\n      }\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n\n// Export the initialization function for use in index.ts\nexport const initializeDatabase = () => storage.initializeDatabase();","size_bytes":26113},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table with role-based authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  // Authentication fields\n  role: varchar(\"role\").notNull().default('learner'), // learner, trainer, policymaker\n  passwordHash: varchar(\"password_hash\").notNull(),\n  surveyCompleted: boolean(\"survey_completed\").default(false),\n  lastLogin: timestamp(\"last_login\"),\n  failedLoginCount: integer(\"failed_login_count\").default(0),\n  // Additional fields for learning platform  \n  academicBackground: varchar(\"academic_background\"),\n  currentRole: varchar(\"current_role\"),\n  careerAspirations: text(\"career_aspirations\"),\n  socioEconomicContext: varchar(\"socio_economic_context\"),\n  preferredLanguage: varchar(\"preferred_language\").default('en'),\n  learningPace: varchar(\"learning_pace\").default('moderate'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Skills table\nexport const skills = pgTable(\"skills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  category: varchar(\"category\").notNull(),\n  nsqfLevel: integer(\"nsqf_level\"),\n  description: text(\"description\"),\n  industryDemand: decimal(\"industry_demand\", { precision: 5, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User skills (many-to-many relationship)\nexport const userSkills = pgTable(\"user_skills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  skillId: varchar(\"skill_id\").notNull().references(() => skills.id),\n  proficiencyLevel: varchar(\"proficiency_level\").notNull(), // beginner, intermediate, advanced\n  proficiencyScore: integer(\"proficiency_score\"), // 0-100\n  lastAssessed: timestamp(\"last_assessed\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  provider: varchar(\"provider\").notNull(),\n  duration: varchar(\"duration\"),\n  nsqfLevel: integer(\"nsqf_level\"),\n  skillLevel: varchar(\"skill_level\"), // beginner, intermediate, advanced\n  category: varchar(\"category\").notNull(),\n  thumbnailUrl: varchar(\"thumbnail_url\"),\n  tags: text(\"tags\").array(),\n  isCertified: boolean(\"is_certified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Learning pathways\nexport const learningPathways = pgTable(\"learning_pathways\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  targetRole: varchar(\"target_role\"),\n  estimatedDuration: varchar(\"estimated_duration\"),\n  difficulty: varchar(\"difficulty\"),\n  progress: integer(\"progress\").default(0), // 0-100\n  aiGenerated: boolean(\"ai_generated\").default(false),\n  courseIds: text(\"course_ids\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User course enrollments\nexport const enrollments = pgTable(\"enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  courseId: varchar(\"course_id\").notNull().references(() => courses.id),\n  progress: integer(\"progress\").default(0), // 0-100\n  status: varchar(\"status\").default('enrolled'), // enrolled, in_progress, completed, dropped\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Achievements/Badges\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\").notNull(),\n  category: varchar(\"category\").notNull(),\n  points: integer(\"points\").default(0),\n  requirements: jsonb(\"requirements\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User achievements\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  achievementId: varchar(\"achievement_id\").notNull().references(() => achievements.id),\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n});\n\n// Industry trends data\nexport const industryTrends = pgTable(\"industry_trends\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sector: varchar(\"sector\").notNull(),\n  skillName: varchar(\"skill_name\").notNull(),\n  demandGrowth: decimal(\"demand_growth\", { precision: 5, scale: 2 }),\n  salaryRange: varchar(\"salary_range\"),\n  jobCount: integer(\"job_count\"),\n  location: varchar(\"location\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Learner survey responses\nexport const learnerSurveys = pgTable(\"learner_surveys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  academicBackground: varchar(\"academic_background\").notNull(),\n  priorSkillsFreeform: text(\"prior_skills_freeform\"),\n  socioEconomicContext: varchar(\"socio_economic_context\"),\n  learningPace: varchar(\"learning_pace\").notNull(),\n  aspirations: text(\"aspirations\").notNull(),\n  priorSkillIds: text(\"prior_skill_ids\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// NCVET qualifications data\nexport const ncvetQualifications = pgTable(\"ncvet_qualifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").unique().notNull(),\n  title: varchar(\"title\").notNull(),\n  sector: varchar(\"sector\").notNull(),\n  nsqfLevel: integer(\"nsqf_level\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// NSQF-based training programs\nexport const trainingPrograms = pgTable(\"training_programs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  provider: varchar(\"provider\").notNull(),\n  mode: varchar(\"mode\").notNull(), // online, offline, hybrid\n  duration: varchar(\"duration\").notNull(),\n  nsqfLevel: integer(\"nsqf_level\").notNull(),\n  sector: varchar(\"sector\").notNull(),\n  qualificationCodes: text(\"qualification_codes\").array(),\n  mappedSkillIds: text(\"mapped_skill_ids\").array(),\n  isCertified: boolean(\"is_certified\").default(true),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Job roles aligned with NSQF/NCVET\nexport const jobRoles = pgTable(\"job_roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  sector: varchar(\"sector\").notNull(),\n  nsqfLevel: integer(\"nsqf_level\").notNull(),\n  qualificationCodes: text(\"qualification_codes\").array(),\n  description: text(\"description\"),\n  salaryRange: varchar(\"salary_range\"),\n  demandLevel: varchar(\"demand_level\"), // high, medium, low\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI Analysis results\nexport const aiAnalysis = pgTable(\"ai_analysis\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  analysisType: varchar(\"analysis_type\").notNull(), // skill_gap, pathway_recommendation, career_guidance\n  input: jsonb(\"input\"),\n  output: jsonb(\"output\"),\n  confidence: decimal(\"confidence\", { precision: 3, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schema exports for validation\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertSkillSchema = createInsertSchema(skills).omit({ id: true, createdAt: true });\nexport const insertCourseSchema = createInsertSchema(courses).omit({ id: true, createdAt: true });\nexport const insertPathwaySchema = createInsertSchema(learningPathways).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertEnrollmentSchema = createInsertSchema(enrollments).omit({ id: true, enrolledAt: true });\nexport const insertSurveySchema = createInsertSchema(learnerSurveys).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertQualificationSchema = createInsertSchema(ncvetQualifications).omit({ id: true, createdAt: true });\nexport const insertTrainingProgramSchema = createInsertSchema(trainingPrograms).omit({ id: true, createdAt: true });\nexport const insertJobRoleSchema = createInsertSchema(jobRoles).omit({ id: true, createdAt: true });\n\n// Registration schema for new users\nexport const registerUserSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8).max(100),\n  firstName: z.string().min(1).max(100),\n  lastName: z.string().min(1).max(100),\n  role: z.enum(['learner', 'trainer', 'policymaker']).default('learner'),\n});\n\n// Login schema\nexport const loginUserSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\n// Safe profile update schema (excludes security-sensitive fields)\nexport const updateProfileSchema = z.object({\n  firstName: z.string().min(1).max(100).optional(),\n  lastName: z.string().min(1).max(100).optional(),\n  profileImageUrl: z.string().url().optional().or(z.literal(\"\")),\n  academicBackground: z.string().max(200).optional(),\n  currentRole: z.string().max(100).optional(),\n  careerAspirations: z.string().max(500).optional(),\n  socioEconomicContext: z.string().max(200).optional(),\n  preferredLanguage: z.string().max(10).optional(),\n  learningPace: z.enum(['slow', 'moderate', 'fast']).optional(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Skill = typeof skills.$inferSelect;\nexport type InsertSkill = z.infer<typeof insertSkillSchema>;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type LearningPathway = typeof learningPathways.$inferSelect;\nexport type InsertPathway = z.infer<typeof insertPathwaySchema>;\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type InsertEnrollment = z.infer<typeof insertEnrollmentSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type UserSkill = typeof userSkills.$inferSelect;\nexport type IndustryTrend = typeof industryTrends.$inferSelect;\nexport type AIAnalysis = typeof aiAnalysis.$inferSelect;\nexport type LearnerSurvey = typeof learnerSurveys.$inferSelect;\nexport type InsertSurvey = z.infer<typeof insertSurveySchema>;\nexport type NCVETQualification = typeof ncvetQualifications.$inferSelect;\nexport type TrainingProgram = typeof trainingPrograms.$inferSelect;\nexport type JobRole = typeof jobRoles.$inferSelect;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type UpdateProfile = z.infer<typeof updateProfileSchema>;\n","size_bytes":11892},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { I18nextProvider } from \"react-i18next\";\nimport i18n from \"@/lib/i18n\";\n\n// Pages\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Profile from \"@/pages/profile\";\nimport Pathways from \"@/pages/pathways\";\nimport Catalog from \"@/pages/catalog\";\nimport Achievements from \"@/pages/achievements\";\nimport Industry from \"@/pages/industry\";\nimport Admin from \"@/pages/admin\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  useEffect(() => {\n    // Set user's preferred language if available\n    if (user?.preferredLanguage) {\n      i18n.changeLanguage(user.preferredLanguage);\n    }\n  }, [user]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/pathways\" component={Pathways} />\n          <Route path=\"/catalog\" component={Catalog} />\n          <Route path=\"/achievements\" component={Achievements} />\n          <Route path=\"/industry\" component={Industry} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/settings\" component={Settings} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <I18nextProvider i18n={i18n}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </I18nextProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2259},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --primary: hsl(222, 84%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 46%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(222, 84%, 54%);\n  --chart-1: hsl(222, 84%, 54%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(43, 96%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 4.9%);\n  --sidebar-primary: hsl(222, 84%, 54%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222, 84%, 54%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(222, 84%, 54%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(222, 84%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(222, 84%, 54%);\n  --sidebar: hsl(222, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(222, 84%, 54%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(222, 84%, 54%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(222, 84%, 54%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.sidebar-transition {\n  transition: transform 0.3s ease-in-out;\n}\n\n.progress-bar {\n  background: linear-gradient(90deg, hsl(222, 84%, 54%) 0%, hsl(158, 64%, 52%) 100%);\n}\n\n.skill-meter {\n  background: linear-gradient(135deg, hsl(158, 64%, 52%) 0%, hsl(43, 96%, 56%) 100%);\n}\n\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n@media (max-width: 768px) {\n  .sidebar-mobile {\n    transform: translateX(-100%);\n  }\n  \n  .sidebar-mobile.open {\n    transform: translateX(0);\n  }\n}\n","size_bytes":3310},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nconst resources = {\n  en: {\n    translation: {\n      // Navigation\n      \"nav.dashboard\": \"Dashboard\",\n      \"nav.profile\": \"Profile\", \n      \"nav.pathways\": \"Learning Pathways\",\n      \"nav.catalog\": \"Course Catalog\",\n      \"nav.achievements\": \"Achievements\",\n      \"nav.industry\": \"Industry Insights\",\n      \"nav.settings\": \"Settings\",\n      \"nav.logout\": \"Logout\",\n      \n      // Dashboard\n      \"dashboard.welcome\": \"Welcome back, {{name}}!\",\n      \"dashboard.subtitle\": \"Continue your journey to becoming a {{role}}\",\n      \"dashboard.learningProgress\": \"Learning Progress\",\n      \"dashboard.badgesEarned\": \"Badges Earned\",\n      \"dashboard.studyTime\": \"Study Time\",\n      \"dashboard.skillMatch\": \"Skill Match\",\n      \"dashboard.industryAlignment\": \"Industry alignment\",\n      \"dashboard.aiAnalysis\": \"AI Skill Gap Analysis\",\n      \"dashboard.updateAnalysis\": \"Update Analysis\",\n      \"dashboard.nextSteps\": \"Recommended Next Steps\",\n      \"dashboard.currentCourses\": \"Current Courses\",\n      \"dashboard.industryInsights\": \"Industry Insights\",\n      \"dashboard.recentAchievements\": \"Recent Achievements\",\n      \n      // Profile\n      \"profile.title\": \"Profile\",\n      \"profile.basicInfo\": \"Basic Information\",\n      \"profile.academicBackground\": \"Academic Background\",\n      \"profile.currentRole\": \"Current Role\",\n      \"profile.careerAspirations\": \"Career Aspirations\",\n      \"profile.learningPace\": \"Learning Pace\",\n      \"profile.save\": \"Save Profile\",\n      \n      // Common\n      \"common.loading\": \"Loading...\",\n      \"common.error\": \"An error occurred\",\n      \"common.save\": \"Save\",\n      \"common.cancel\": \"Cancel\",\n      \"common.continue\": \"Continue\",\n      \"common.viewAll\": \"View All\",\n      \"common.beginner\": \"Beginner\",\n      \"common.intermediate\": \"Intermediate\", \n      \"common.advanced\": \"Advanced\",\n    }\n  },\n  hi: {\n    translation: {\n      // Navigation\n      \"nav.dashboard\": \"डैशबोर्ड\",\n      \"nav.profile\": \"प्रोफाइल\",\n      \"nav.pathways\": \"शिक्षण पथ\",\n      \"nav.catalog\": \"कोर्स सूची\",\n      \"nav.achievements\": \"उपलब्धियां\",\n      \"nav.industry\": \"उद्योग अंतर्दृष्टि\",\n      \"nav.settings\": \"सेटिंग्स\",\n      \"nav.logout\": \"लॉगआउट\",\n      \n      // Dashboard\n      \"dashboard.welcome\": \"वापस स्वागत है, {{name}}!\",\n      \"dashboard.subtitle\": \"{{role}} बनने की अपनी यात्रा जारी रखें\",\n      \"dashboard.learningProgress\": \"सीखने की प्रगति\",\n      \"dashboard.badgesEarned\": \"अर्जित बैज\",\n      \"dashboard.studyTime\": \"अध्ययन समय\",\n      \"dashboard.skillMatch\": \"कौशल मैच\",\n      \"dashboard.industryAlignment\": \"उद्योग संरेखण\",\n      \"dashboard.aiAnalysis\": \"AI कौशल अंतर विश्लेषण\",\n      \"dashboard.updateAnalysis\": \"विश्लेषण अपडेट करें\",\n      \"dashboard.nextSteps\": \"अनुशंसित अगले कदम\",\n      \"dashboard.currentCourses\": \"वर्तमान कोर्स\",\n      \"dashboard.industryInsights\": \"उद्योग अंतर्दृष्टि\",\n      \"dashboard.recentAchievements\": \"हाल की उपलब्धियां\",\n      \n      // Profile\n      \"profile.title\": \"प्रोफाइल\",\n      \"profile.basicInfo\": \"बुनियादी जानकारी\",\n      \"profile.academicBackground\": \"शैक्षणिक पृष्ठभूमि\",\n      \"profile.currentRole\": \"वर्तमान भूमिका\",\n      \"profile.careerAspirations\": \"करियर की आकांक्षाएं\",\n      \"profile.learningPace\": \"सीखने की गति\",\n      \"profile.save\": \"प्रोफाइल सेव करें\",\n      \n      // Common\n      \"common.loading\": \"लोड हो रहा है...\",\n      \"common.error\": \"एक त्रुटि हुई\",\n      \"common.save\": \"सेव करें\",\n      \"common.cancel\": \"रद्द करें\",\n      \"common.continue\": \"जारी रखें\",\n      \"common.viewAll\": \"सभी देखें\",\n      \"common.beginner\": \"शुरुआती\",\n      \"common.intermediate\": \"मध्यम\",\n      \"common.advanced\": \"उन्नत\",\n    }\n  },\n  ta: {\n    translation: {\n      // Navigation\n      \"nav.dashboard\": \"டாஷ்போர்டு\",\n      \"nav.profile\": \"சுயவிவரம்\",\n      \"nav.pathways\": \"கற்றல் பாதைகள்\",\n      \"nav.catalog\": \"பாடநெறி பட்டியல்\",\n      \"nav.achievements\": \"சாதனைகள்\",\n      \"nav.industry\": \"தொழில்துறை நுண்ணறிவு\",\n      \"nav.settings\": \"அமைப்புகள்\",\n      \"nav.logout\": \"வெளியேறு\",\n      \n      // Dashboard\n      \"dashboard.welcome\": \"மீண்டும் வரவேற்கிறோம், {{name}}!\",\n      \"dashboard.subtitle\": \"{{role}} ஆக மாறுவதற்கான உங்கள் பயணத்தைத் தொடருங்கள்\",\n      \"dashboard.learningProgress\": \"கற்றல் முன்னேற்றம்\",\n      \"dashboard.badgesEarned\": \"பெற்ற பேட்ஜ்கள்\",\n      \"dashboard.studyTime\": \"பாடக்கில் நேரம்\",\n      \"dashboard.skillMatch\": \"திறமை பொருத்தம்\",\n      \"dashboard.industryAlignment\": \"தொழில்துறை சீரமைப்பு\",\n      \"dashboard.aiAnalysis\": \"AI திறமை இடைவெளி பகுப்பாய்வு\",\n      \"dashboard.updateAnalysis\": \"பகுப்பாய்வு புதுப்பிக்கவும்\",\n      \"dashboard.nextSteps\": \"பரிந்துரைக்கப்பட்ட அடுத்த படிகள்\",\n      \"dashboard.currentCourses\": \"தற்போதைய பாடநெறிகள்\",\n      \"dashboard.industryInsights\": \"தொழில்துறை நுண்ணறிவு\",\n      \"dashboard.recentAchievements\": \"சமீபத்திய சாதனைகள்\",\n      \n      // Common\n      \"common.loading\": \"ஏற்றுகிறது...\",\n      \"common.error\": \"ஒரு பிழை ஏற்பட்டது\",\n      \"common.save\": \"சேமி\",\n      \"common.cancel\": \"ரத்து செய்\",\n      \"common.continue\": \"தொடர்\",\n      \"common.viewAll\": \"அனைத்தையும் பார்\",\n      \"common.beginner\": \"ஆரம்பநிலை\",\n      \"common.intermediate\": \"இடைநிலை\",\n      \"common.advanced\": \"மேம்பட்ட\",\n    }\n  },\n  te: {\n    translation: {\n      // Navigation\n      \"nav.dashboard\": \"డాష్‌బోర్డ్\",\n      \"nav.profile\": \"ప్రొఫైల్\",\n      \"nav.pathways\": \"నేర్చుకునే మార్గాలు\",\n      \"nav.catalog\": \"కోర్సు కేటలాగ్\",\n      \"nav.achievements\": \"సాధనలు\",\n      \"nav.industry\": \"ఇండస్ట్రీ అంతర్దృష్టులు\",\n      \"nav.settings\": \"సెట్టింగులు\",\n      \"nav.logout\": \"లాగ్ అవుట్\",\n      \n      // Dashboard\n      \"dashboard.welcome\": \"మళ్ళీ స్వాగతం, {{name}}!\",\n      \"dashboard.subtitle\": \"{{role}} అవ్వడానికి మీ ప్రయాణాన్ని కొనసాగించండి\",\n      \"dashboard.learningProgress\": \"నేర్చుకోవడంలో పురోగతి\",\n      \"dashboard.badgesEarned\": \"సంపాదించిన బ్యాడ్జిలు\",\n      \"dashboard.studyTime\": \"చదువు సమయం\",\n      \"dashboard.skillMatch\": \"నైపుణ్య మ్యాచ్\",\n      \"dashboard.industryAlignment\": \"ఇండస్ట్రీ అలైన్‌మెంట్\",\n      \"dashboard.aiAnalysis\": \"AI నైపుణ్య గ్యాప్ విశ్లేషణ\",\n      \"dashboard.updateAnalysis\": \"విశ్లేషణ నవీకరించు\",\n      \"dashboard.nextSteps\": \"సిఫార్సు చేయబడిన తదుపరి దశలు\",\n      \"dashboard.currentCourses\": \"ప్రస్తుత కోర్సులు\",\n      \"dashboard.industryInsights\": \"ఇండస్ట్రీ అంతర్దృష్టులు\",\n      \"dashboard.recentAchievements\": \"ఇటీవలి సాధనలు\",\n      \n      // Common\n      \"common.loading\": \"లోడ్ చేస్తోంది...\",\n      \"common.error\": \"లోపం సంభవించింది\",\n      \"common.save\": \"సేవ్ చేయి\",\n      \"common.cancel\": \"రద్దు చేయి\",\n      \"common.continue\": \"కొనసాగించు\",\n      \"common.viewAll\": \"అన్నీ చూడండి\",\n      \"common.beginner\": \"ప్రారంభ స్థాయి\",\n      \"common.intermediate\": \"మధ్య స్థాయి\",\n      \"common.advanced\": \"ఉన్నత స్థాయి\",\n    }\n  }\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: 'en',\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","size_bytes":9546},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/achievements.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Menu, Trophy, Star, BarChart3, Clock, GraduationCap, \n  Users, Lock, Award, Target, Zap, BookOpen, TrendingUp \n} from \"lucide-react\";\nimport type { Achievement } from \"@shared/schema\";\n\nexport default function Achievements() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: userAchievements, isLoading: achievementsLoading } = useQuery({\n    queryKey: ['/api/user/achievements'],\n    enabled: isAuthenticated,\n  });\n\n  const { data: allAchievements } = useQuery({\n    queryKey: ['/api/achievements'],\n    enabled: isAuthenticated,\n  });\n\n  const { data: analytics } = useQuery({\n    queryKey: ['/api/dashboard/analytics'],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  // Mock achievements data\n  const mockEarnedAchievements = [\n    {\n      id: \"1\",\n      title: \"Python Pro\",\n      description: \"Completed 10 Python exercises\",\n      icon: \"star\",\n      category: \"technical\",\n      points: 50,\n      earnedDate: \"2024-01-15\"\n    },\n    {\n      id: \"2\", \n      title: \"Data Viz Expert\",\n      description: \"Created 5 dashboard visualizations\",\n      icon: \"chart\",\n      category: \"visualization\",\n      points: 75,\n      earnedDate: \"2024-01-10\"\n    },\n    {\n      id: \"3\",\n      title: \"Consistent Learner\",\n      description: \"7 day learning streak\",\n      icon: \"clock\",\n      category: \"consistency\",\n      points: 30,\n      earnedDate: \"2024-01-08\"\n    },\n    {\n      id: \"4\",\n      title: \"Course Master\",\n      description: \"Completed 3 full courses\",\n      icon: \"graduation\",\n      category: \"completion\",\n      points: 100,\n      earnedDate: \"2024-01-05\"\n    }\n  ];\n\n  const mockAvailableAchievements = [\n    {\n      id: \"5\",\n      title: \"Team Player\",\n      description: \"Join a study group\",\n      icon: \"users\",\n      category: \"social\",\n      points: 40,\n      requirements: \"Join at least 1 study group\"\n    },\n    {\n      id: \"6\",\n      title: \"Certificate Holder\",\n      description: \"Earn first certification\", \n      icon: \"trophy\",\n      category: \"certification\",\n      points: 150,\n      requirements: \"Complete a certified course\"\n    },\n    {\n      id: \"7\",\n      title: \"Speed Learner\",\n      description: \"Complete course in record time\",\n      icon: \"zap\",\n      category: \"speed\",\n      points: 80,\n      requirements: \"Complete course 50% faster than average\"\n    },\n    {\n      id: \"8\",\n      title: \"Knowledge Sharer\",\n      description: \"Help other learners\",\n      icon: \"users\",\n      category: \"community\",\n      points: 60,\n      requirements: \"Answer 10 questions in forums\"\n    }\n  ];\n\n  const earnedAchievements = userAchievements?.length > 0 ? userAchievements : mockEarnedAchievements;\n  const availableAchievements = allAchievements?.length > 0 ? allAchievements : mockAvailableAchievements;\n\n  const totalPoints = earnedAchievements.reduce((sum: number, achievement: any) => sum + (achievement.points || 0), 0);\n  const totalPossiblePoints = [...earnedAchievements, ...availableAchievements].reduce((sum: number, achievement: any) => sum + (achievement.points || 0), 0);\n  const completionPercentage = totalPossiblePoints > 0 ? (totalPoints / totalPossiblePoints) * 100 : 0;\n\n  const getIcon = (iconName: string) => {\n    switch (iconName) {\n      case 'star': return Star;\n      case 'chart': return BarChart3;\n      case 'clock': return Clock;\n      case 'graduation': return GraduationCap;\n      case 'users': return Users;\n      case 'trophy': return Trophy;\n      case 'target': return Target;\n      case 'zap': return Zap;\n      case 'book': return BookOpen;\n      case 'trending': return TrendingUp;\n      default: return Star;\n    }\n  };\n\n  const getIconColor = (category: string) => {\n    switch (category) {\n      case 'technical': return 'text-accent';\n      case 'visualization': return 'text-secondary';\n      case 'consistency': return 'text-primary';\n      case 'completion': return 'text-destructive';\n      case 'social': return 'text-secondary';\n      case 'certification': return 'text-accent';\n      case 'speed': return 'text-primary';\n      case 'community': return 'text-secondary';\n      default: return 'text-primary';\n    }\n  };\n\n  const getBgColor = (category: string) => {\n    switch (category) {\n      case 'technical': return 'bg-accent/10';\n      case 'visualization': return 'bg-secondary/10';\n      case 'consistency': return 'bg-primary/10';\n      case 'completion': return 'bg-destructive/10';\n      case 'social': return 'bg-secondary/10';\n      case 'certification': return 'bg-accent/10';\n      case 'speed': return 'bg-primary/10';\n      case 'community': return 'bg-secondary/10';\n      default: return 'bg-primary/10';\n    }\n  };\n\n  const getCategoryBadgeColor = (category: string) => {\n    switch (category) {\n      case 'technical': return 'bg-accent/20 text-accent';\n      case 'visualization': return 'bg-secondary/20 text-secondary';\n      case 'consistency': return 'bg-primary/20 text-primary';\n      case 'completion': return 'bg-destructive/20 text-destructive';\n      case 'social': return 'bg-secondary/20 text-secondary';\n      case 'certification': return 'bg-accent/20 text-accent';\n      case 'speed': return 'bg-primary/20 text-primary';\n      case 'community': return 'bg-secondary/20 text-secondary';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        user={user}\n        data-testid=\"sidebar\"\n      />\n\n      {/* Main Content */}\n      <main className=\"ml-0 md:ml-72 min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setSidebarOpen(true)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">\n                {t('nav.achievements')}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Track your learning milestones and celebrate progress\n              </p>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-8\">\n          {/* Stats Overview */}\n          <section className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card className=\"border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <Trophy className=\"text-accent text-xl\" />\n                  </div>\n                  <span className=\"text-2xl font-bold text-foreground\" data-testid=\"earned-count\">\n                    {earnedAchievements.length}\n                  </span>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Badges Earned</h3>\n                <p className=\"text-sm text-muted-foreground\">Out of {earnedAchievements.length + availableAchievements.length} total</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Star className=\"text-primary text-xl\" />\n                  </div>\n                  <span className=\"text-2xl font-bold text-foreground\" data-testid=\"total-points\">\n                    {totalPoints}\n                  </span>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Total Points</h3>\n                <p className=\"text-sm text-muted-foreground\">From completed achievements</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                    <Target className=\"text-secondary text-xl\" />\n                  </div>\n                  <span className=\"text-2xl font-bold text-foreground\" data-testid=\"completion-percentage\">\n                    {Math.round(completionPercentage)}%\n                  </span>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Completion</h3>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div \n                    className=\"progress-bar h-2 rounded-full\" \n                    style={{ width: `${completionPercentage}%` }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                    <Award className=\"text-destructive text-xl\" />\n                  </div>\n                  <span className=\"text-2xl font-bold text-foreground\" data-testid=\"rank\">\n                    #{Math.floor(Math.random() * 100) + 1}\n                  </span>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Rank</h3>\n                <p className=\"text-sm text-muted-foreground\">Among all learners</p>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Achievement Tabs */}\n          <Tabs defaultValue=\"earned\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"achievement-tabs\">\n              <TabsTrigger value=\"earned\" className=\"flex items-center gap-2\">\n                <Trophy className=\"h-4 w-4\" />\n                Earned ({earnedAchievements.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"available\" className=\"flex items-center gap-2\">\n                <Target className=\"h-4 w-4\" />\n                Available ({availableAchievements.length})\n              </TabsTrigger>\n            </TabsList>\n            \n            {/* Earned Achievements */}\n            <TabsContent value=\"earned\" className=\"mt-6\">\n              {achievementsLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {Array.from({ length: 6 }).map((_, index) => (\n                    <Skeleton key={index} className=\"h-48 w-full\" />\n                  ))}\n                </div>\n              ) : earnedAchievements.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {earnedAchievements.map((achievement: any) => {\n                    const IconComponent = getIcon(achievement.icon);\n                    return (\n                      <Card \n                        key={achievement.id} \n                        className=\"border border-border card-hover\"\n                        data-testid={`earned-achievement-${achievement.id}`}\n                      >\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between\">\n                            <div className={`w-16 h-16 ${getBgColor(achievement.category)} rounded-full flex items-center justify-center`}>\n                              <IconComponent className={`${getIconColor(achievement.category)} text-2xl`} />\n                            </div>\n                            <div className=\"text-right\">\n                              <Badge variant=\"outline\" className=\"bg-accent/10 text-accent border-accent/20\">\n                                +{achievement.points} pts\n                              </Badge>\n                            </div>\n                          </div>\n                          <CardTitle className=\"text-lg\">\n                            {achievement.title}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <p className=\"text-sm text-muted-foreground mb-4\">\n                            {achievement.description}\n                          </p>\n                          <div className=\"flex items-center justify-between\">\n                            <Badge \n                              variant=\"outline\" \n                              className={getCategoryBadgeColor(achievement.category)}\n                            >\n                              {achievement.category}\n                            </Badge>\n                            <span className=\"text-xs text-muted-foreground\">\n                              Earned {achievement.earnedDate || 'recently'}\n                            </span>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"text-center py-16\">\n                  <Trophy className=\"h-24 w-24 text-muted-foreground mx-auto mb-6\" />\n                  <h3 className=\"text-2xl font-bold text-foreground mb-4\">\n                    No Achievements Yet\n                  </h3>\n                  <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                    Start learning and completing courses to earn your first achievements and badges.\n                  </p>\n                  <Button data-testid=\"button-start-learning\">\n                    <BookOpen className=\"h-4 w-4 mr-2\" />\n                    Start Learning\n                  </Button>\n                </div>\n              )}\n            </TabsContent>\n            \n            {/* Available Achievements */}\n            <TabsContent value=\"available\" className=\"mt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {availableAchievements.map((achievement: any) => {\n                  const IconComponent = getIcon(achievement.icon);\n                  return (\n                    <Card \n                      key={achievement.id} \n                      className=\"border border-border opacity-75 hover:opacity-100 transition-opacity\"\n                      data-testid={`available-achievement-${achievement.id}`}\n                    >\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center\">\n                            <Lock className=\"text-muted-foreground text-xl\" />\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant=\"outline\" className=\"bg-muted text-muted-foreground\">\n                              +{achievement.points} pts\n                            </Badge>\n                          </div>\n                        </div>\n                        <CardTitle className=\"text-lg text-muted-foreground\">\n                          {achievement.title}\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          {achievement.description}\n                        </p>\n                        <div className=\"space-y-3\">\n                          <div>\n                            <span className=\"text-xs font-medium text-foreground\">Requirements:</span>\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {achievement.requirements || achievement.description}\n                            </p>\n                          </div>\n                          <Badge \n                            variant=\"outline\" \n                            className=\"bg-muted text-muted-foreground\"\n                          >\n                            {achievement.category}\n                          </Badge>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Progress Section */}\n          <section>\n            <Card className=\"border border-border\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5 text-primary\" />\n                  Achievement Progress\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Overall Completion</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {earnedAchievements.length} / {earnedAchievements.length + availableAchievements.length}\n                    </span>\n                  </div>\n                  <Progress \n                    value={completionPercentage} \n                    className=\"h-3\"\n                    data-testid=\"overall-progress\"\n                  />\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 pt-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-foreground\">{earnedAchievements.filter((a: any) => a.category === 'technical').length}</div>\n                      <div className=\"text-xs text-muted-foreground\">Technical</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-foreground\">{earnedAchievements.filter((a: any) => a.category === 'completion').length}</div>\n                      <div className=\"text-xs text-muted-foreground\">Completion</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-foreground\">{earnedAchievements.filter((a: any) => a.category === 'consistency').length}</div>\n                      <div className=\"text-xs text-muted-foreground\">Consistency</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-foreground\">{earnedAchievements.filter((a: any) => a.category === 'social').length}</div>\n                      <div className=\"text-xs text-muted-foreground\">Social</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":21183},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Menu, Users, BookOpen, TrendingUp, BarChart3, \n  Target, Globe, Award, Settings, Download, FileText \n} from \"lucide-react\";\n\nexport default function Admin() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: analytics } = useQuery({\n    queryKey: ['/api/dashboard/analytics'],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  // Mock admin analytics data\n  const adminMetrics = {\n    totalUsers: 12847,\n    activeUsers: 8934,\n    totalCourses: 487,\n    completionRate: 73,\n    averageSkillScore: 82,\n    industryAlignment: 89,\n    pathwaysGenerated: 1456,\n    certificatesIssued: 892\n  };\n\n  const recentActivity = [\n    { action: \"New user registered\", user: \"Priya Sharma\", time: \"2 minutes ago\" },\n    { action: \"Course completed\", user: \"Rahul Kumar\", course: \"Python Basics\", time: \"5 minutes ago\" },\n    { action: \"Pathway generated\", user: \"Anita Singh\", pathway: \"Data Analyst Track\", time: \"8 minutes ago\" },\n    { action: \"Achievement earned\", user: \"Vikram Patel\", achievement: \"Python Pro\", time: \"12 minutes ago\" },\n    { action: \"Course enrolled\", user: \"Sunita Gupta\", course: \"Machine Learning\", time: \"15 minutes ago\" }\n  ];\n\n  const topSkills = [\n    { name: \"Python Programming\", demand: 89, users: 3421 },\n    { name: \"Data Analysis\", demand: 87, users: 2987 },\n    { name: \"Machine Learning\", demand: 84, users: 2654 },\n    { name: \"SQL\", demand: 82, users: 4123 },\n    { name: \"Data Visualization\", demand: 79, users: 2341 }\n  ];\n\n  const handleExportReport = () => {\n    toast({\n      title: \"Report Generated\",\n      description: \"Learning analytics report has been generated and will be downloaded shortly.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        user={user}\n        data-testid=\"sidebar\"\n      />\n\n      {/* Main Content */}\n      <main className=\"ml-0 md:ml-72 min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">\n                  Admin Dashboard\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Platform analytics and learner management\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Button variant=\"outline\" onClick={handleExportReport} data-testid=\"button-export-report\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export Report\n              </Button>\n              <Button data-testid=\"button-admin-settings\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Settings\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-8\">\n          {/* Key Metrics */}\n          <section className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Users className=\"text-primary text-xl\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-secondary/10 text-secondary border-secondary/20\">\n                    +12% this month\n                  </Badge>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Total Users</h3>\n                <div className=\"text-2xl font-bold text-foreground\" data-testid=\"total-users\">\n                  {adminMetrics.totalUsers.toLocaleString()}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {adminMetrics.activeUsers.toLocaleString()} active this month\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <BookOpen className=\"text-accent text-xl\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-accent/10 text-accent border-accent/20\">\n                    +8% this month\n                  </Badge>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Total Courses</h3>\n                <div className=\"text-2xl font-bold text-foreground\" data-testid=\"total-courses\">\n                  {adminMetrics.totalCourses}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Across all categories\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"text-secondary text-xl\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-secondary/10 text-secondary border-secondary/20\">\n                    +5% this month\n                  </Badge>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Completion Rate</h3>\n                <div className=\"text-2xl font-bold text-foreground\" data-testid=\"completion-rate\">\n                  {adminMetrics.completionRate}%\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Average across all courses\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                    <Award className=\"text-destructive text-xl\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-destructive/10 text-destructive border-destructive/20\">\n                    +15% this month\n                  </Badge>\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Certificates</h3>\n                <div className=\"text-2xl font-bold text-foreground\" data-testid=\"certificates-issued\">\n                  {adminMetrics.certificatesIssued}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Issued this month\n                </p>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Detailed Analytics */}\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"admin-tabs\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"users\">Users</TabsTrigger>\n              <TabsTrigger value=\"courses\">Courses</TabsTrigger>\n              <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            </TabsList>\n            \n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"mt-6 space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Recent Activity */}\n                <Card className=\"border border-border\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"h-5 w-5 text-primary\" />\n                      Recent Activity\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {recentActivity.map((activity, index) => (\n                        <div key={index} className=\"flex items-center justify-between py-2 border-b border-border last:border-0\" data-testid={`activity-${index}`}>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium text-foreground\">\n                              {activity.action}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {activity.user}\n                              {activity.course && ` • ${activity.course}`}\n                              {activity.pathway && ` • ${activity.pathway}`}\n                              {activity.achievement && ` • ${activity.achievement}`}\n                            </div>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {activity.time}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Top Skills */}\n                <Card className=\"border border-border\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Target className=\"h-5 w-5 text-secondary\" />\n                      Most Popular Skills\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {topSkills.map((skill, index) => (\n                        <div key={index} className=\"space-y-2\" data-testid={`skill-${index}`}>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm font-medium text-foreground\">{skill.name}</span>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-sm text-muted-foreground\">{skill.users} learners</span>\n                              <Badge variant=\"outline\" className={skill.demand >= 85 ? \"bg-secondary/10 text-secondary\" : \"bg-accent/10 text-accent\"}>\n                                {skill.demand}% demand\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"w-full bg-muted rounded-full h-2\">\n                            <div \n                              className=\"h-2 rounded-full bg-gradient-to-r from-primary to-secondary\" \n                              style={{ width: `${skill.demand}%` }}\n                            />\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Platform Performance */}\n              <Card className=\"border border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Globe className=\"h-5 w-5 text-accent\" />\n                    Platform Performance\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-foreground mb-1\">\n                        {adminMetrics.averageSkillScore}%\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Avg Skill Score</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-foreground mb-1\">\n                        {adminMetrics.industryAlignment}%\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Industry Alignment</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-foreground mb-1\">\n                        {adminMetrics.pathwaysGenerated.toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">AI Pathways</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-foreground mb-1\">\n                        4.8/5\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">User Satisfaction</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Users Tab */}\n            <TabsContent value=\"users\" className=\"mt-6\">\n              <Card className=\"border border-border\">\n                <CardHeader>\n                  <CardTitle>User Management</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-16\">\n                    <Users className=\"h-24 w-24 text-muted-foreground mx-auto mb-6\" />\n                    <h3 className=\"text-2xl font-bold text-foreground mb-4\">\n                      User Management Interface\n                    </h3>\n                    <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                      Advanced user management features will be available here including user profiles, \n                      progress tracking, and individual learner analytics.\n                    </p>\n                    <Button data-testid=\"button-user-management\">\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      Manage Users\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Courses Tab */}\n            <TabsContent value=\"courses\" className=\"mt-6\">\n              <Card className=\"border border-border\">\n                <CardHeader>\n                  <CardTitle>Course Management</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-16\">\n                    <BookOpen className=\"h-24 w-24 text-muted-foreground mx-auto mb-6\" />\n                    <h3 className=\"text-2xl font-bold text-foreground mb-4\">\n                      Course Management Interface\n                    </h3>\n                    <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                      Comprehensive course management including creation, editing, \n                      NSQF alignment, and performance analytics.\n                    </p>\n                    <Button data-testid=\"button-course-management\">\n                      <BookOpen className=\"h-4 w-4 mr-2\" />\n                      Manage Courses\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Analytics Tab */}\n            <TabsContent value=\"analytics\" className=\"mt-6\">\n              <Card className=\"border border-border\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    Advanced Analytics\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-download-analytics\">\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Download Report\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-16\">\n                    <BarChart3 className=\"h-24 w-24 text-muted-foreground mx-auto mb-6\" />\n                    <h3 className=\"text-2xl font-bold text-foreground mb-4\">\n                      Advanced Analytics Dashboard\n                    </h3>\n                    <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                      Deep dive into learning analytics, skill gap analysis, \n                      industry trend correlations, and AI recommendation performance.\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 max-w-lg mx-auto\">\n                      <Button variant=\"outline\" data-testid=\"button-learning-analytics\">\n                        Learning Analytics\n                      </Button>\n                      <Button variant=\"outline\" data-testid=\"button-skill-trends\">\n                        Skill Trends\n                      </Button>\n                      <Button variant=\"outline\" data-testid=\"button-ai-performance\">\n                        AI Performance\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":19630},"client/src/pages/catalog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Menu, Search, Filter, BookOpen, Clock, Award, Users, Star } from \"lucide-react\";\nimport type { Course } from \"@shared/schema\";\n\nexport default function Catalog() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [skillLevel, setSkillLevel] = useState(\"\");\n  const [nsqfLevel, setNsqfLevel] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: courses, isLoading: coursesLoading } = useQuery({\n    queryKey: ['/api/courses', { \n      category: category === \"all\" ? \"\" : category, \n      skillLevel: skillLevel === \"all\" ? \"\" : skillLevel, \n      nsqfLevel: nsqfLevel === \"all\" ? \"\" : nsqfLevel, \n      search: searchQuery \n    }],\n    enabled: isAuthenticated,\n  });\n\n  const { data: recommendations } = useQuery({\n    queryKey: ['/api/ai/course-recommendations'],\n    enabled: isAuthenticated,\n  });\n\n  const enrollMutation = useMutation({\n    mutationFn: async (courseId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/enrollments\", { courseId });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Enrolled Successfully\",\n        description: \"You have been enrolled in the course.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/enrollments'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Enrollment Failed\",\n        description: \"Unable to enroll in course. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const categories = [\n    \"Data Analytics\", \"Software Development\", \"Digital Marketing\", \n    \"Cybersecurity\", \"Cloud Computing\", \"AI & Machine Learning\"\n  ];\n\n  const skillLevels = [\"beginner\", \"intermediate\", \"advanced\"];\n  const nsqfLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n  const getSkillLevelColor = (level: string) => {\n    switch (level?.toLowerCase()) {\n      case 'beginner': return 'bg-secondary/10 text-secondary border-secondary/20';\n      case 'intermediate': return 'bg-accent/10 text-accent border-accent/20';  \n      case 'advanced': return 'bg-destructive/10 text-destructive border-destructive/20';\n      default: return 'bg-muted text-muted-foreground border-border';\n    }\n  };\n\n  const getNsqfColor = (level: number) => {\n    if (level <= 3) return 'bg-secondary/10 text-secondary';\n    if (level <= 6) return 'bg-accent/10 text-accent';\n    return 'bg-primary/10 text-primary';\n  };\n\n  // Mock courses if no data\n  const mockCourses = [\n    {\n      id: \"1\",\n      title: \"Python for Data Analysis\",\n      description: \"Comprehensive introduction to data analysis using Python and pandas\",\n      provider: \"TechEd Institute\",\n      duration: \"8 weeks\",\n      skillLevel: \"beginner\",\n      nsqfLevel: 4,\n      category: \"Data Analytics\",\n      isCertified: true,\n      thumbnailUrl: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\"\n    },\n    {\n      id: \"2\",\n      title: \"Advanced Machine Learning\",\n      description: \"Deep dive into ML algorithms, neural networks, and practical implementation\",\n      provider: \"AI Academy\",\n      duration: \"12 weeks\",\n      skillLevel: \"advanced\",\n      nsqfLevel: 7,\n      category: \"AI & Machine Learning\",\n      isCertified: true,\n      thumbnailUrl: \"https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\"\n    },\n    {\n      id: \"3\",\n      title: \"Web Development Fundamentals\",\n      description: \"Learn HTML, CSS, JavaScript, and modern web development practices\",\n      provider: \"CodeCraft\",\n      duration: \"10 weeks\",\n      skillLevel: \"intermediate\",\n      nsqfLevel: 5,\n      category: \"Software Development\",\n      isCertified: false,\n      thumbnailUrl: \"https://images.unsplash.com/photo-1461749280684-dccba630e2f6?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\"\n    }\n  ];\n\n  const displayCourses = courses?.length > 0 ? courses : mockCourses;\n\n  const handleEnroll = (courseId: string) => {\n    enrollMutation.mutate(courseId);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        user={user}\n        data-testid=\"sidebar\"\n      />\n\n      {/* Main Content */}\n      <main className=\"ml-0 md:ml-72 min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setSidebarOpen(true)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">\n                {t('nav.catalog')}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Discover courses aligned with your learning goals\n              </p>\n            </div>\n          </div>\n        </header>\n\n        {/* Filters */}\n        <div className=\"border-b border-border p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search courses...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={category} onValueChange={setCategory}>\n              <SelectTrigger data-testid=\"select-category\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {categories.map((cat) => (\n                  <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={skillLevel} onValueChange={setSkillLevel}>\n              <SelectTrigger data-testid=\"select-skill-level\">\n                <SelectValue placeholder=\"Skill Level\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Levels</SelectItem>\n                {skillLevels.map((level) => (\n                  <SelectItem key={level} value={level}>\n                    {level.charAt(0).toUpperCase() + level.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={nsqfLevel} onValueChange={setNsqfLevel}>\n              <SelectTrigger data-testid=\"select-nsqf-level\">\n                <SelectValue placeholder=\"NSQF Level\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All NSQF Levels</SelectItem>\n                {nsqfLevels.map((level) => (\n                  <SelectItem key={level} value={level.toString()}>\n                    Level {level}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Button \n              variant=\"outline\" \n              className=\"flex items-center gap-2\" \n              data-testid=\"button-clear-filters\"\n              onClick={() => {\n                setSearchQuery(\"\");\n                setCategory(\"\");\n                setSkillLevel(\"\");\n                setNsqfLevel(\"\");\n              }}\n            >\n              <Filter className=\"h-4 w-4\" />\n              Clear Filters\n            </Button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {/* Recommended Courses */}\n          {recommendations && recommendations.length > 0 && (\n            <section className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-foreground mb-4 flex items-center gap-2\">\n                <Star className=\"h-5 w-5 text-accent\" />\n                Recommended for You\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {recommendations.slice(0, 3).map((course: Course) => (\n                  <Card key={course.id} className=\"border border-accent/20 bg-accent/5\">\n                    <CardHeader>\n                      <Badge variant=\"outline\" className=\"w-fit bg-accent/10 text-accent border-accent/20\">\n                        Recommended\n                      </Badge>\n                      <CardTitle className=\"text-lg line-clamp-2\">\n                        {course.title}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2 mb-4\">\n                        {course.description}\n                      </p>\n                      <Button \n                        className=\"w-full\"\n                        onClick={() => handleEnroll(course.id)}\n                        disabled={enrollMutation.isPending}\n                        data-testid={`button-enroll-recommended-${course.id}`}\n                      >\n                        <BookOpen className=\"h-4 w-4 mr-2\" />\n                        Enroll Now\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </section>\n          )}\n\n          {/* All Courses */}\n          <section>\n            <h2 className=\"text-xl font-bold text-foreground mb-6\">All Courses</h2>\n            {coursesLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {Array.from({ length: 9 }).map((_, index) => (\n                  <Card key={index} className=\"border border-border\">\n                    <CardHeader>\n                      <Skeleton className=\"h-40 w-full rounded-lg\" />\n                      <Skeleton className=\"h-6 w-3/4\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-4 w-1/2\" />\n                        <Skeleton className=\"h-4 w-2/3\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {displayCourses.map((course: Course) => (\n                  <Card \n                    key={course.id} \n                    className=\"border border-border card-hover\"\n                    data-testid={`course-${course.id}`}\n                  >\n                    <CardHeader className=\"p-0\">\n                      <img \n                        src={course.thumbnailUrl || \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&h=200\"}\n                        alt={course.title}\n                        className=\"w-full h-40 object-cover rounded-t-lg\"\n                      />\n                      <div className=\"p-4 pb-0\">\n                        <CardTitle className=\"text-lg mb-2 line-clamp-2\">\n                          {course.title}\n                        </CardTitle>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"pt-0\">\n                      <p className=\"text-sm text-muted-foreground line-clamp-2 mb-4\">\n                        {course.description}\n                      </p>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Provider</span>\n                          <span className=\"font-medium\">{course.provider}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2 flex-wrap\">\n                          <Badge \n                            variant=\"outline\" \n                            className={getSkillLevelColor(course.skillLevel || '')}\n                          >\n                            {course.skillLevel}\n                          </Badge>\n                          {course.nsqfLevel && (\n                            <Badge \n                              variant=\"outline\"\n                              className={getNsqfColor(course.nsqfLevel)}\n                            >\n                              NSQF {course.nsqfLevel}\n                            </Badge>\n                          )}\n                          {course.isCertified && (\n                            <Badge variant=\"outline\" className=\"bg-primary/10 text-primary border-primary/20\">\n                              <Award className=\"h-3 w-3 mr-1\" />\n                              Certified\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span>{course.duration}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Users className=\"h-4 w-4\" />\n                            <span>{Math.floor(Math.random() * 1000) + 100}+ enrolled</span>\n                          </div>\n                        </div>\n                        \n                        <Button \n                          className=\"w-full mt-4\"\n                          onClick={() => handleEnroll(course.id)}\n                          disabled={enrollMutation.isPending}\n                          data-testid={`button-enroll-${course.id}`}\n                        >\n                          <BookOpen className=\"h-4 w-4 mr-2\" />\n                          Enroll in Course\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n\n            {!coursesLoading && displayCourses.length === 0 && (\n              <div className=\"text-center py-16\">\n                <BookOpen className=\"h-24 w-24 text-muted-foreground mx-auto mb-6\" />\n                <h3 className=\"text-2xl font-bold text-foreground mb-4\">\n                  No Courses Found\n                </h3>\n                <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                  Try adjusting your filters or search query to find relevant courses.\n                </p>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchQuery(\"\");\n                    setCategory(\"\");\n                    setSkillLevel(\"\");\n                    setNsqfLevel(\"\");\n                  }}\n                  data-testid=\"button-reset-search\"\n                >\n                  Clear All Filters\n                </Button>\n              </div>\n            )}\n          </section>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":18259},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ProgressCards } from \"@/components/dashboard/progress-cards\";\nimport { SkillAnalysis } from \"@/components/dashboard/skill-analysis\";\nimport { Recommendations } from \"@/components/dashboard/recommendations\";\nimport { CourseList } from \"@/components/dashboard/course-list\";\nimport { IndustryInsights } from \"@/components/dashboard/industry-insights\";\nimport { AchievementsGrid } from \"@/components/dashboard/achievements-grid\";\nimport { useState, useEffect } from \"react\";\nimport { Bell, Menu, Plus } from \"lucide-react\";\nimport i18n from \"@/lib/i18n\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { t } = useTranslation();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: ['/api/dashboard/analytics'],\n  });\n\n  const { data: enrollments } = useQuery({\n    queryKey: ['/api/enrollments'],\n  });\n\n  const { data: achievements } = useQuery({\n    queryKey: ['/api/user/achievements'],\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const handleLanguageChange = (language: string) => {\n    i18n.changeLanguage(language);\n    // TODO: Update user preference in backend\n  };\n\n  if (analyticsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const currentRole = user?.careerAspirations || \"Data Analyst\";\n  const userName = user?.firstName || \"User\";\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        user={user}\n        data-testid=\"sidebar\"\n      />\n\n      {/* Main Content */}\n      <main className=\"ml-0 md:ml-72 min-h-screen\">\n        {/* Top Navigation */}\n        <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div>\n                <h2 className=\"text-2xl font-bold text-foreground\">\n                  {t('dashboard.welcome', { name: userName })}\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  {t('dashboard.subtitle', { role: currentRole })}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <select \n                className=\"px-3 py-2 bg-card border border-border rounded-md text-foreground text-sm\"\n                onChange={(e) => handleLanguageChange(e.target.value)}\n                value={i18n.language}\n                data-testid=\"select-language\"\n              >\n                <option value=\"en\">English</option>\n                <option value=\"hi\">हिंदी</option>\n                <option value=\"ta\">தமிழ்</option>\n                <option value=\"te\">తెలుగు</option>\n              </select>\n              \n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5 text-muted-foreground\" />\n                <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\"></span>\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"p-6 space-y-8\">\n          {/* Progress Overview */}\n          <ProgressCards analytics={analytics} />\n\n          {/* AI Recommendations & Current Pathway */}\n          <section className=\"grid grid-cols-1 xl:grid-cols-3 gap-8\">\n            <div className=\"xl:col-span-2\">\n              <SkillAnalysis user={user} />\n            </div>\n            <Recommendations user={user} />\n          </section>\n\n          {/* Current Courses & Industry Trends */}\n          <section className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <CourseList enrollments={enrollments} />\n            <IndustryInsights />\n          </section>\n\n          {/* Achievement & Gamification */}\n          <AchievementsGrid achievements={achievements} />\n        </div>\n      </main>\n\n      {/* Quick Action FAB */}\n      <Button\n        className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg hover:shadow-xl transition-all hover:scale-110 z-40\"\n        data-testid=\"button-fab-add\"\n      >\n        <Plus className=\"h-6 w-6\" />\n      </Button>\n    </div>\n  );\n}\n","size_bytes":5575},"client/src/pages/industry.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Menu, TrendingUp, DollarSign, BarChart3, MapPin, \n  Briefcase, Target, Globe, Users, Clock \n} from \"lucide-react\";\n\nexport default function Industry() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [selectedSector, setSelectedSector] = useState(\"Data Analytics\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: industryTrends, isLoading: trendsLoading } = useQuery({\n    queryKey: ['/api/industry-trends', selectedSector],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const sectors = [\n    \"Data Analytics\", \"IT & Software\", \"Digital Marketing\", \"Healthcare\", \n    \"Finance\", \"E-commerce\", \"Manufacturing\", \"Education\"\n  ];\n\n  // Mock industry data\n  const mockTrends = [\n    {\n      id: \"1\",\n      sector: \"Data Analytics\",\n      skillName: \"Python Programming\",\n      demandGrowth: 45,\n      salaryRange: \"₹6-12L\",\n      jobCount: 2840,\n      location: \"Bangalore\"\n    },\n    {\n      id: \"2\",\n      sector: \"Data Analytics\", \n      skillName: \"Machine Learning\",\n      demandGrowth: 38,\n      salaryRange: \"₹8-15L\",\n      jobCount: 1920,\n      location: \"Mumbai\"\n    },\n    {\n      id: \"3\",\n      sector: \"Data Analytics\",\n      skillName: \"Data Visualization\",\n      demandGrowth: 32,\n      salaryRange: \"₹5-10L\", \n      jobCount: 1560,\n      location: \"Delhi\"\n    },\n    {\n      id: \"4\",\n      sector: \"Data Analytics\",\n      skillName: \"SQL & Databases\",\n      demandGrowth: 28,\n      salaryRange: \"₹4-8L\",\n      jobCount: 3200,\n      location: \"Pune\"\n    }\n  ];\n\n  const mockMarketInsights = [\n    {\n      title: \"Emerging Technologies\",\n      value: \"AI/ML, Cloud Computing\",\n      trend: \"↑ 52%\",\n      description: \"High demand for AI and cloud skills across industries\"\n    },\n    {\n      title: \"Top Hiring Cities\",\n      value: \"Bangalore, Mumbai, Delhi\",\n      trend: \"↑ 35%\",\n      description: \"Major tech hubs continue to lead job creation\"\n    },\n    {\n      title: \"Remote Work Trend\", \n      value: \"68% of jobs\",\n      trend: \"↑ 24%\",\n      description: \"Increase in remote and hybrid work opportunities\"\n    },\n    {\n      title: \"Skill Premium\",\n      value: \"40-60% higher\",\n      trend: \"↑ 18%\",\n      description: \"Certified professionals earn significantly more\"\n    }\n  ];\n\n  const displayTrends = industryTrends?.length > 0 ? industryTrends : mockTrends.filter(trend => trend.sector === selectedSector);\n\n  const getGrowthColor = (growth: number) => {\n    if (growth >= 40) return 'text-secondary';\n    if (growth >= 25) return 'text-accent';\n    if (growth >= 15) return 'text-primary';\n    return 'text-muted-foreground';\n  };\n\n  const getGrowthBgColor = (growth: number) => {\n    if (growth >= 40) return 'bg-secondary/10 border-secondary/20';\n    if (growth >= 25) return 'bg-accent/10 border-accent/20';\n    if (growth >= 15) return 'bg-primary/10 border-primary/20';\n    return 'bg-muted border-border';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        user={user}\n        data-testid=\"sidebar\"\n      />\n\n      {/* Main Content */}\n      <main className=\"ml-0 md:ml-72 min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">\n                  {t('nav.industry')}\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Real-time job market trends and skill demand forecasting\n                </p>\n              </div>\n            </div>\n            <Select value={selectedSector} onValueChange={setSelectedSector}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-sector\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {sectors.map((sector) => (\n                  <SelectItem key={sector} value={sector}>\n                    {sector}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-8\">\n          {/* Market Overview */}\n          <section>\n            <h2 className=\"text-xl font-bold text-foreground mb-6 flex items-center gap-2\">\n              <Globe className=\"h-5 w-5 text-primary\" />\n              Market Overview\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {mockMarketInsights.map((insight, index) => (\n                <Card key={index} className=\"border border-border card-hover\" data-testid={`market-insight-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        {index === 0 && <Target className=\"h-5 w-5 text-primary\" />}\n                        {index === 1 && <MapPin className=\"h-5 w-5 text-primary\" />}\n                        {index === 2 && <Users className=\"h-5 w-5 text-primary\" />}\n                        {index === 3 && <TrendingUp className=\"h-5 w-5 text-primary\" />}\n                      </div>\n                      <Badge variant=\"outline\" className=\"bg-secondary/10 text-secondary border-secondary/20\">\n                        {insight.trend}\n                      </Badge>\n                    </div>\n                    <h3 className=\"font-semibold text-foreground mb-2\">{insight.title}</h3>\n                    <div className=\"text-lg font-bold text-primary mb-2\">{insight.value}</div>\n                    <p className=\"text-xs text-muted-foreground\">{insight.description}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n\n          {/* Skill Demand Trends */}\n          <section>\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-bold text-foreground flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5 text-primary\" />\n                Skill Demand Trends - {selectedSector}\n              </h2>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Clock className=\"h-4 w-4\" />\n                Updated 2 hours ago\n              </div>\n            </div>\n\n            {trendsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {Array.from({ length: 4 }).map((_, index) => (\n                  <Skeleton key={index} className=\"h-32 w-full\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {displayTrends.map((trend: any, index: number) => (\n                  <Card \n                    key={trend.id || index} \n                    className={`border ${getGrowthBgColor(trend.demandGrowth)} card-hover`}\n                    data-testid={`trend-${index}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg flex items-center gap-2\">\n                          <TrendingUp className={`h-5 w-5 ${getGrowthColor(trend.demandGrowth)}`} />\n                          {trend.skillName}\n                        </CardTitle>\n                        <Badge \n                          variant=\"outline\" \n                          className={`${getGrowthColor(trend.demandGrowth)} font-bold`}\n                        >\n                          ↑ {trend.demandGrowth}%\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                          <div>\n                            <div className=\"text-sm font-semibold text-foreground\">\n                              {trend.salaryRange}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">Salary Range</div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Briefcase className=\"h-4 w-4 text-muted-foreground\" />\n                          <div>\n                            <div className=\"text-sm font-semibold text-foreground\">\n                              {trend.jobCount?.toLocaleString()}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">Open Jobs</div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"mt-4 flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground\">\n                          Top Location: {trend.location}\n                        </span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </section>\n\n          {/* Detailed Analytics */}\n          <section className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Salary Trends */}\n            <Card className=\"border border-border\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5 text-accent\" />\n                  Salary Trends\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                    <div>\n                      <div className=\"font-semibold text-foreground\">Entry Level</div>\n                      <div className=\"text-sm text-muted-foreground\">0-2 years experience</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-foreground\">₹3-6L</div>\n                      <div className=\"text-sm text-secondary\">↑ 12%</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                    <div>\n                      <div className=\"font-semibold text-foreground\">Mid Level</div>\n                      <div className=\"text-sm text-muted-foreground\">3-5 years experience</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-foreground\">₹6-12L</div>\n                      <div className=\"text-sm text-secondary\">↑ 18%</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                    <div>\n                      <div className=\"font-semibold text-foreground\">Senior Level</div>\n                      <div className=\"text-sm text-muted-foreground\">5+ years experience</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-foreground\">₹12-25L</div>\n                      <div className=\"text-sm text-secondary\">↑ 25%</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Top Companies Hiring */}\n            <Card className=\"border border-border\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Briefcase className=\"h-5 w-5 text-primary\" />\n                  Top Companies Hiring\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { name: \"Google\", jobs: 145, type: \"Tech Giant\" },\n                    { name: \"Microsoft\", jobs: 132, type: \"Tech Giant\" },\n                    { name: \"Amazon\", jobs: 128, type: \"E-commerce\" },\n                    { name: \"Flipkart\", jobs: 98, type: \"E-commerce\" },\n                    { name: \"Zomato\", jobs: 87, type: \"Food Tech\" },\n                    { name: \"Paytm\", jobs: 76, type: \"Fintech\" }\n                  ].map((company, index) => (\n                    <div key={index} className=\"flex items-center justify-between\" data-testid={`company-${index}`}>\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center text-xs font-bold text-primary\">\n                          {index + 1}\n                        </div>\n                        <div>\n                          <div className=\"font-semibold text-foreground\">{company.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{company.type}</div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-foreground\">{company.jobs}</div>\n                        <div className=\"text-xs text-muted-foreground\">open roles</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Learning Recommendations */}\n          <section>\n            <Card className=\"border border-primary/20 bg-primary/5\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-primary\">\n                  <Target className=\"h-5 w-5\" />\n                  Skills to Focus On\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Based on current market trends in {selectedSector}, here are the most valuable skills to develop:\n                </p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"p-4 bg-card rounded-lg border border-border\">\n                    <h4 className=\"font-semibold text-foreground mb-2\">High Priority</h4>\n                    <div className=\"space-y-2\">\n                      {[\"Python\", \"Machine Learning\", \"Cloud Computing\"].map((skill, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"bg-destructive/10 text-destructive border-destructive/20\">\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"p-4 bg-card rounded-lg border border-border\">\n                    <h4 className=\"font-semibold text-foreground mb-2\">Medium Priority</h4>\n                    <div className=\"space-y-2\">\n                      {[\"SQL\", \"Data Visualization\", \"Statistics\"].map((skill, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"bg-accent/10 text-accent border-accent/20\">\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"p-4 bg-card rounded-lg border border-border\">\n                    <h4 className=\"font-semibold text-foreground mb-2\">Emerging Skills</h4>\n                    <div className=\"space-y-2\">\n                      {[\"AI Ethics\", \"MLOps\", \"Edge Computing\"].map((skill, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"bg-secondary/10 text-secondary border-secondary/20\">\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":18729},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Brain, \n  Target, \n  TrendingUp, \n  Users, \n  Award, \n  BookOpen,\n  Zap,\n  Globe,\n  ChevronRight\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const features = [\n    {\n      icon: Brain,\n      title: \"AI-Powered Analysis\",\n      description: \"Advanced skill gap analysis using machine learning to identify your learning needs\"\n    },\n    {\n      icon: Target,\n      title: \"NSQF Aligned Pathways\", \n      description: \"Learning paths aligned with National Skills Qualifications Framework standards\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"Industry Insights\",\n      description: \"Real-time job market trends and skill demand forecasting\"\n    },\n    {\n      icon: Users,\n      title: \"Personalized Journey\",\n      description: \"Customized learning experience based on your background and aspirations\"\n    },\n    {\n      icon: Award,\n      title: \"Gamified Learning\",\n      description: \"Earn badges, track progress, and celebrate achievements\"\n    },\n    {\n      icon: Globe,\n      title: \"Multilingual Support\",\n      description: \"Available in English, Hindi, Tamil, and Telugu\"\n    }\n  ];\n\n  const stats = [\n    { value: \"10,000+\", label: \"Learners Empowered\" },\n    { value: \"500+\", label: \"Industry-Aligned Courses\" },\n    { value: \"95%\", label: \"Job Placement Rate\" },\n    { value: \"50+\", label: \"Skill Categories\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/5\">\n      {/* Header */}\n      <header className=\"border-b border-border/40 backdrop-blur-sm bg-background/80 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Brain className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">SkillPath AI</h1>\n                <p className=\"text-sm text-muted-foreground\">Personalized Learning</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <select className=\"px-3 py-2 bg-card border border-border rounded-md text-foreground text-sm\">\n                <option value=\"en\">English</option>\n                <option value=\"hi\">हिंदी</option>\n                <option value=\"ta\">தமிழ்</option>\n                <option value=\"te\">తెలుగు</option>\n              </select>\n              <Button onClick={handleLogin} data-testid=\"button-login\">\n                Get Started <ChevronRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <Badge variant=\"secondary\" className=\"mb-6\" data-testid=\"badge-sih2025\">\n            🏆 SIH 2025 Innovation\n          </Badge>\n          <h2 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6 leading-tight\">\n            AI-Powered Learning Path\n            <br />\n            <span className=\"text-primary\">Generator</span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            Unlock your potential with personalized vocational training pathways. \n            Our AI analyzes your profile and generates NSQF-aligned learning journeys \n            tailored to industry demands and your career aspirations.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Button size=\"lg\" onClick={handleLogin} className=\"text-lg px-8\" data-testid=\"button-start-journey\">\n              Start Your Journey <Zap className=\"w-5 h-5 ml-2\" />\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8\" data-testid=\"button-explore-demo\">\n              <BookOpen className=\"w-5 h-5 mr-2\" /> Explore Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-card/50 border-y border-border/40\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 text-center\">\n            {stats.map((stat, index) => (\n              <div key={index} data-testid={`stat-${index}`}>\n                <div className=\"text-3xl md:text-4xl font-bold text-primary mb-2\">\n                  {stat.value}\n                </div>\n                <div className=\"text-muted-foreground\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Why Choose SkillPath AI?\n            </h3>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Experience the future of vocational training with our comprehensive AI-driven platform\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"border-border/50 hover:shadow-lg transition-all duration-300 hover:-translate-y-1\" data-testid={`feature-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                    <feature.icon className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-foreground mb-2\">\n                    {feature.title}\n                  </h4>\n                  <p className=\"text-muted-foreground\">\n                    {feature.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary to-secondary text-primary-foreground\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h3 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Ready to Transform Your Career?\n          </h3>\n          <p className=\"text-xl mb-8 opacity-90 max-w-2xl mx-auto\">\n            Join thousands of learners who have already discovered their personalized learning paths. \n            Start your journey towards a future-ready career today.\n          </p>\n          <Button \n            size=\"lg\" \n            variant=\"secondary\" \n            onClick={handleLogin}\n            className=\"text-lg px-8\"\n            data-testid=\"button-join-now\"\n          >\n            Join Now - It's Free <ChevronRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border/40 py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center gap-3 mb-4 md:mb-0\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Brain className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <div>\n                <div className=\"font-bold text-foreground\">SkillPath AI</div>\n                <div className=\"text-sm text-muted-foreground\">Empowering India's Workforce</div>\n              </div>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              © 2025 SkillPath AI. Built for SIH 2025 Competition.\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":8309},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pathways.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Menu, Route, Plus, Clock, Target, BookOpen, TrendingUp, Brain } from \"lucide-react\";\nimport type { LearningPathway } from \"@shared/schema\";\n\nexport default function Pathways() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\", \n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: pathways, isLoading: pathwaysLoading } = useQuery({\n    queryKey: ['/api/pathways'],\n    enabled: isAuthenticated,\n  });\n\n  const generatePathwayMutation = useMutation({\n    mutationFn: async (targetRole: string) => {\n      const skillAnalysisResponse = await apiRequest(\"POST\", \"/api/ai/skill-analysis\", { targetRole });\n      const skillAnalysis = await skillAnalysisResponse.json();\n      \n      const pathwayResponse = await apiRequest(\"POST\", \"/api/ai/generate-pathway\", {\n        skillGapAnalysis: skillAnalysis,\n        targetRole\n      });\n      return pathwayResponse.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Pathway Generated\",\n        description: \"Your personalized learning pathway has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/pathways'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Generation Failed\",\n        description: \"Unable to generate pathway. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGeneratePathway = () => {\n    const targetRole = user?.careerAspirations || \"Data Analyst\";\n    generatePathwayMutation.mutate(targetRole);\n  };\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty?.toLowerCase()) {\n      case 'beginner': return 'bg-secondary/10 text-secondary border-secondary/20';\n      case 'intermediate': return 'bg-accent/10 text-accent border-accent/20';\n      case 'advanced': return 'bg-destructive/10 text-destructive border-destructive/20';\n      default: return 'bg-muted text-muted-foreground border-border';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        user={user}\n        data-testid=\"sidebar\"\n      />\n\n      {/* Main Content */}\n      <main className=\"ml-0 md:ml-72 min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">\n                  {t('nav.pathways')}\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  AI-generated personalized learning journeys\n                </p>\n              </div>\n            </div>\n            <Button \n              onClick={handleGeneratePathway}\n              disabled={generatePathwayMutation.isPending}\n              data-testid=\"button-generate-pathway\"\n            >\n              {generatePathwayMutation.isPending ? (\n                <Brain className=\"h-4 w-4 mr-2 animate-pulse\" />\n              ) : (\n                <Plus className=\"h-4 w-4 mr-2\" />\n              )}\n              Generate New Pathway\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {pathwaysLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.from({ length: 6 }).map((_, index) => (\n                <Card key={index} className=\"border border-border\">\n                  <CardHeader>\n                    <Skeleton className=\"h-6 w-3/4\" />\n                    <Skeleton className=\"h-4 w-full\" />\n                  </CardHeader>\n                  <CardContent>\n                    <Skeleton className=\"h-20 w-full\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : pathways && pathways.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {pathways.map((pathway: LearningPathway) => (\n                <Card \n                  key={pathway.id} \n                  className=\"border border-border card-hover cursor-pointer\"\n                  data-testid={`pathway-${pathway.id}`}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg mb-2 line-clamp-2\">\n                          {pathway.title}\n                        </CardTitle>\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                          {pathway.description}\n                        </p>\n                      </div>\n                      {pathway.aiGenerated && (\n                        <Badge variant=\"outline\" className=\"ml-2 bg-primary/10 text-primary border-primary/20\">\n                          <Brain className=\"h-3 w-3 mr-1\" />\n                          AI\n                        </Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {/* Progress */}\n                      <div>\n                        <div className=\"flex items-center justify-between text-sm mb-2\">\n                          <span className=\"text-muted-foreground\">Progress</span>\n                          <span className=\"font-medium\">{pathway.progress || 0}%</span>\n                        </div>\n                        <Progress value={pathway.progress || 0} className=\"h-2\" />\n                      </div>\n\n                      {/* Metadata */}\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          <span>{pathway.estimatedDuration || 'N/A'}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Target className=\"h-4 w-4\" />\n                          <span>{pathway.targetRole || 'General'}</span>\n                        </div>\n                      </div>\n\n                      {/* Difficulty Badge */}\n                      {pathway.difficulty && (\n                        <Badge \n                          variant=\"outline\" \n                          className={getDifficultyColor(pathway.difficulty)}\n                        >\n                          {pathway.difficulty}\n                        </Badge>\n                      )}\n\n                      {/* Action Button */}\n                      <Button \n                        className=\"w-full mt-4\"\n                        variant={pathway.progress && pathway.progress > 0 ? \"default\" : \"outline\"}\n                        data-testid={`button-pathway-${pathway.id}`}\n                      >\n                        {pathway.progress && pathway.progress > 0 ? (\n                          <>\n                            <BookOpen className=\"h-4 w-4 mr-2\" />\n                            Continue Learning\n                          </>\n                        ) : (\n                          <>\n                            <Route className=\"h-4 w-4 mr-2\" />\n                            Start Pathway\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <Route className=\"h-24 w-24 text-muted-foreground mx-auto mb-6\" />\n              <h3 className=\"text-2xl font-bold text-foreground mb-4\">\n                No Learning Pathways Yet\n              </h3>\n              <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                Generate your first AI-powered learning pathway tailored to your career aspirations and skill level.\n              </p>\n              <Button \n                size=\"lg\"\n                onClick={handleGeneratePathway}\n                disabled={generatePathwayMutation.isPending}\n                data-testid=\"button-create-first-pathway\"\n              >\n                {generatePathwayMutation.isPending ? (\n                  <Brain className=\"h-5 w-5 mr-2 animate-pulse\" />\n                ) : (\n                  <TrendingUp className=\"h-5 w-5 mr-2\" />\n                )}\n                Create Your First Pathway\n              </Button>\n            </div>\n          )}\n\n          {generatePathwayMutation.isPending && (\n            <Card className=\"border border-border mt-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-4\">\n                  <Brain className=\"h-8 w-8 text-primary animate-pulse\" />\n                  <div>\n                    <h4 className=\"font-semibold text-foreground\">Generating Pathway</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      AI is analyzing your profile and creating a personalized learning journey...\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12072},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ProfileForm } from \"@/components/profile/profile-form\";\nimport { SkillsAssessment } from \"@/components/profile/skills-assessment\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Menu, User, Target } from \"lucide-react\";\n\nexport default function Profile() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        user={user}\n        data-testid=\"sidebar\"\n      />\n\n      {/* Main Content */}\n      <main className=\"ml-0 md:ml-72 min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setSidebarOpen(true)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">\n                {t('profile.title')}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Manage your learning profile and skill assessments\n              </p>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          <Tabs defaultValue=\"basic\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"profile-tabs\">\n              <TabsTrigger value=\"basic\" className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                Basic Information\n              </TabsTrigger>\n              <TabsTrigger value=\"skills\" className=\"flex items-center gap-2\">\n                <Target className=\"h-4 w-4\" />\n                Skills Assessment\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"basic\" className=\"mt-6\">\n              <ProfileForm user={user} />\n            </TabsContent>\n            \n            <TabsContent value=\"skills\" className=\"mt-6\">\n              <SkillsAssessment user={user} />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":4020},"client/src/components/dashboard/achievements-grid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTranslation } from \"react-i18next\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Trophy, Star, BarChart3, Clock, GraduationCap, Users, Lock } from \"lucide-react\";\nimport type { Achievement } from \"@shared/schema\";\n\ninterface AchievementsGridProps {\n  achievements?: Achievement[];\n}\n\nexport function AchievementsGrid({ achievements }: AchievementsGridProps) {\n  const { t } = useTranslation();\n\n  // Mock achievements data\n  const mockAchievements = [\n    {\n      id: \"1\",\n      title: \"Python Pro\",\n      description: \"Completed 10 Python exercises\",\n      icon: \"star\",\n      category: \"technical\",\n      earned: true\n    },\n    {\n      id: \"2\", \n      title: \"Data Viz Expert\",\n      description: \"Created 5 dashboard visualizations\",\n      icon: \"chart\",\n      category: \"visualization\",\n      earned: true\n    },\n    {\n      id: \"3\",\n      title: \"Consistent Learner\",\n      description: \"7 day learning streak\",\n      icon: \"clock\",\n      category: \"consistency\", \n      earned: true\n    },\n    {\n      id: \"4\",\n      title: \"Course Master\",\n      description: \"Completed 3 full courses\",\n      icon: \"graduation\",\n      category: \"completion\",\n      earned: true\n    },\n    {\n      id: \"5\",\n      title: \"Team Player\",\n      description: \"Join a study group\",\n      icon: \"users\",\n      category: \"social\",\n      earned: false\n    },\n    {\n      id: \"6\",\n      title: \"Certificate Holder\",\n      description: \"Earn first certification\", \n      icon: \"trophy\",\n      category: \"certification\",\n      earned: false\n    }\n  ];\n\n  const displayAchievements = achievements?.length > 0 ? \n    achievements.map(achievement => ({\n      id: achievement.id,\n      title: achievement.title,\n      description: achievement.description,\n      icon: achievement.icon,\n      category: achievement.category,\n      earned: true\n    })) : mockAchievements;\n\n  const getIcon = (iconName: string) => {\n    switch (iconName) {\n      case 'star': return Star;\n      case 'chart': return BarChart3;\n      case 'clock': return Clock;\n      case 'graduation': return GraduationCap;\n      case 'users': return Users;\n      case 'trophy': return Trophy;\n      default: return Star;\n    }\n  };\n\n  const getIconColor = (category: string, earned: boolean) => {\n    if (!earned) return 'text-muted-foreground';\n    \n    switch (category) {\n      case 'technical': return 'text-accent';\n      case 'visualization': return 'text-secondary';\n      case 'consistency': return 'text-primary';\n      case 'completion': return 'text-destructive';\n      case 'social': return 'text-secondary';\n      case 'certification': return 'text-accent';\n      default: return 'text-primary';\n    }\n  };\n\n  const getBgColor = (category: string, earned: boolean) => {\n    if (!earned) return 'bg-muted';\n    \n    switch (category) {\n      case 'technical': return 'bg-accent/10';\n      case 'visualization': return 'bg-secondary/10';\n      case 'consistency': return 'bg-primary/10';\n      case 'completion': return 'bg-destructive/10';\n      case 'social': return 'bg-secondary/10';\n      case 'certification': return 'bg-accent/10';\n      default: return 'bg-primary/10';\n    }\n  };\n\n  if (!displayAchievements) {\n    return (\n      <Card className=\"border border-border\" data-testid=\"achievements-loading\">\n        <CardContent className=\"p-6\">\n          <Skeleton className=\"h-6 w-48 mb-4\" />\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Skeleton key={index} className=\"h-32 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"achievements-grid-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-bold text-foreground\">\n            {t('dashboard.recentAchievements')}\n          </h3>\n          <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80 font-medium\" data-testid=\"button-view-all-badges\">\n            View All Badges\n          </Button>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n          {displayAchievements.map((achievement) => {\n            const IconComponent = achievement.earned ? getIcon(achievement.icon) : Lock;\n            const iconColor = getIconColor(achievement.category, achievement.earned);\n            const bgColor = getBgColor(achievement.category, achievement.earned);\n            \n            return (\n              <div\n                key={achievement.id}\n                className={`text-center p-4 rounded-lg hover:bg-muted transition-colors cursor-pointer ${achievement.earned ? '' : 'opacity-50'}`}\n                data-testid={`achievement-${achievement.id}`}\n              >\n                <div className={`w-16 h-16 ${bgColor} rounded-full flex items-center justify-center mx-auto mb-3`}>\n                  <IconComponent className={`${iconColor} text-2xl`} />\n                </div>\n                <h4 className={`font-semibold text-sm mb-1 ${achievement.earned ? 'text-foreground' : 'text-muted-foreground'}`}>\n                  {achievement.title}\n                </h4>\n                <p className={`text-xs ${achievement.earned ? 'text-muted-foreground' : 'text-muted-foreground'}`}>\n                  {achievement.description}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            You've earned {displayAchievements.filter(a => a.earned).length} out of {displayAchievements.length} badges\n          </p>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className=\"h-2 rounded-full bg-gradient-to-r from-primary to-secondary\"\n              style={{ \n                width: `${(displayAchievements.filter(a => a.earned).length / displayAchievements.length) * 100}%` \n              }}\n              data-testid=\"achievements-progress-bar\"\n            />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6350},"client/src/components/dashboard/course-list.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTranslation } from \"react-i18next\";\nimport { PlayCircle } from \"lucide-react\";\nimport type { Enrollment } from \"@shared/schema\";\n\ninterface CourseListProps {\n  enrollments?: Enrollment[];\n}\n\nexport function CourseList({ enrollments }: CourseListProps) {\n  const { t } = useTranslation();\n\n  // Mock course data if no enrollments\n  const mockCourses = [\n    {\n      id: \"1\",\n      title: \"Python for Data Analysis\",\n      provider: \"DataCamp\",\n      progress: 78,\n      thumbnail: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=80&h=60\"\n    },\n    {\n      id: \"2\", \n      title: \"Tableau Fundamentals\",\n      provider: \"Tableau Learning\",\n      progress: 45,\n      thumbnail: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=80&h=60\"\n    }\n  ];\n\n  const displayCourses = enrollments?.length > 0 ? \n    enrollments.slice(0, 2).map(enrollment => ({\n      id: enrollment.courseId,\n      title: `Course ${enrollment.courseId}`,\n      provider: \"Learning Platform\",\n      progress: enrollment.progress || 0,\n      thumbnail: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=80&h=60\"\n    })) : mockCourses;\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"course-list-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-bold text-foreground\">\n            {t('dashboard.currentCourses')}\n          </h3>\n          <Button variant=\"ghost\" className=\"text-primary hover:text-primary/80 font-medium\" data-testid=\"button-view-all-courses\">\n            {t('common.viewAll')}\n          </Button>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {displayCourses.map((course) => (\n            <div key={course.id} className=\"flex items-center gap-4 p-4 border border-border rounded-lg\" data-testid={`course-${course.id}`}>\n              <img \n                src={course.thumbnail}\n                alt={`${course.title} thumbnail`}\n                className=\"w-20 h-15 rounded-lg object-cover\"\n              />\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold text-foreground\">{course.title}</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  By {course.provider} • {course.progress}% Complete\n                </p>\n                <div className=\"mt-2 w-full bg-muted rounded-full h-2\">\n                  <div \n                    className=\"h-2 rounded-full bg-gradient-to-r from-primary to-secondary\" \n                    style={{ width: `${course.progress}%` }}\n                    data-testid={`course-progress-${course.id}`}\n                  />\n                </div>\n              </div>\n              <Button \n                size=\"sm\"\n                className=\"hover:bg-primary/90 transition-colors\"\n                data-testid={`button-continue-${course.id}`}\n              >\n                <PlayCircle className=\"w-4 h-4 mr-1\" />\n                {t('common.continue')}\n              </Button>\n            </div>\n          ))}\n        </div>\n        \n        {displayCourses.length === 0 && (\n          <div className=\"text-center py-8\">\n            <PlayCircle className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-semibold text-foreground mb-2\">\n              No Courses Enrolled\n            </h4>\n            <p className=\"text-muted-foreground\">\n              Browse our course catalog to start your learning journey.\n            </p>\n            <Button className=\"mt-4\" data-testid=\"button-browse-courses\">\n              Browse Courses\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4097},"client/src/components/dashboard/industry-insights.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { TrendingUp, DollarSign, BarChart3 } from \"lucide-react\";\n\nexport function IndustryInsights() {\n  const { t } = useTranslation();\n\n  const { data: trends, isLoading } = useQuery({\n    queryKey: ['/api/industry-trends'],\n  });\n\n  // Mock industry insights if no data\n  const mockInsights = [\n    {\n      title: \"Data Analyst Demand\",\n      growth: \"↑ 24%\",\n      description: \"Growing demand in fintech and healthcare sectors\",\n      type: \"High Demand\",\n      color: \"secondary\",\n      icon: TrendingUp\n    },\n    {\n      title: \"Avg. Salary Range\", \n      value: \"₹4.5-8L\",\n      description: \"Entry to mid-level positions in major cities\",\n      type: \"Trending\",\n      color: \"accent\",\n      icon: DollarSign\n    },\n    {\n      title: \"Top Skills Required\",\n      description: \"Most in-demand skills in the market\",\n      skills: [\"Python\", \"SQL\", \"Excel\", \"Tableau\"],\n      type: \"Skills\",\n      color: \"primary\",\n      icon: BarChart3\n    }\n  ];\n\n  const displayInsights = trends?.length > 0 ? \n    trends.slice(0, 3).map((trend: any, index: number) => ({\n      title: trend.skillName || trend.sector,\n      growth: trend.demandGrowth ? `↑ ${trend.demandGrowth}%` : undefined,\n      value: trend.salaryRange,\n      description: `${trend.jobCount} jobs available`,\n      type: \"Market Data\",\n      color: index % 2 === 0 ? \"secondary\" : \"accent\",\n      icon: TrendingUp\n    })) : mockInsights;\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-border\" data-testid=\"industry-insights-loading\">\n        <CardContent className=\"p-6\">\n          <Skeleton className=\"h-6 w-48 mb-4\" />\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-24 w-full\" />\n            <Skeleton className=\"h-24 w-full\" />\n            <Skeleton className=\"h-24 w-full\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getBadgeVariant = (color: string) => {\n    switch (color) {\n      case 'secondary': return 'secondary';\n      case 'accent': return 'outline';\n      case 'primary': return 'default';\n      default: return 'secondary';\n    }\n  };\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"industry-insights-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-bold text-foreground\">\n            {t('dashboard.industryInsights')}\n          </h3>\n          <select className=\"px-3 py-1 border border-border rounded-md text-sm\" data-testid=\"select-industry-sector\">\n            <option>Data Analytics</option>\n            <option>IT & Software</option>\n            <option>Digital Marketing</option>\n            <option>Healthcare</option>\n            <option>Finance</option>\n          </select>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {displayInsights.map((insight, index) => {\n            const IconComponent = insight.icon;\n            return (\n              <div \n                key={index}\n                className={`p-4 bg-${insight.color}/5 border border-${insight.color}/20 rounded-lg`}\n                data-testid={`industry-insight-${index}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-semibold text-foreground\">\n                    {insight.title}\n                  </h4>\n                  <div className=\"flex items-center gap-2\">\n                    {insight.growth && (\n                      <span className={`text-${insight.color} text-sm font-medium`}>\n                        {insight.growth}\n                      </span>\n                    )}\n                    {insight.value && (\n                      <span className={`text-${insight.color} text-sm font-medium`}>\n                        {insight.value}\n                      </span>\n                    )}\n                    {!insight.growth && !insight.value && (\n                      <IconComponent className={`h-4 w-4 text-${insight.color}`} />\n                    )}\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  {insight.description}\n                </p>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={getBadgeVariant(insight.color)} className=\"text-xs\">\n                    {insight.type}\n                  </Badge>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {insight.skills ? 'Top Skills' : 'Updated 2 hours ago'}\n                  </span>\n                </div>\n                \n                {insight.skills && (\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {insight.skills.map((skill, skillIndex) => (\n                      <Badge \n                        key={skillIndex} \n                        variant=\"default\" \n                        className=\"text-xs\"\n                        data-testid={`skill-tag-${skillIndex}`}\n                      >\n                        {skill}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"mt-4 text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            Data sourced from industry reports and job portals\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5728},"client/src/components/dashboard/progress-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useTranslation } from \"react-i18next\";\nimport { GraduationCap, Medal, Clock, Target } from \"lucide-react\";\n\ninterface ProgressCardsProps {\n  analytics?: {\n    averageProgress: number;\n    badgesEarned: number;\n    studyTimeThisMonth: number;\n    industryAlignment: number;\n  };\n}\n\nexport function ProgressCards({ analytics }: ProgressCardsProps) {\n  const { t } = useTranslation();\n\n  const cards = [\n    {\n      title: t('dashboard.learningProgress'),\n      value: `${analytics?.averageProgress || 0}%`,\n      icon: GraduationCap,\n      progress: analytics?.averageProgress || 0,\n      color: \"text-secondary\",\n      bgColor: \"bg-secondary/10\"\n    },\n    {\n      title: t('dashboard.badgesEarned'),\n      value: analytics?.badgesEarned || 0,\n      icon: Medal,\n      subtitle: \"+3 this month\",\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\"\n    },\n    {\n      title: t('dashboard.studyTime'),\n      value: `${analytics?.studyTimeThisMonth || 0}h`,\n      icon: Clock,\n      subtitle: \"This month\",\n      color: \"text-secondary\",\n      bgColor: \"bg-secondary/10\"\n    },\n    {\n      title: t('dashboard.skillMatch'),\n      value: `${analytics?.industryAlignment || 0}%`,\n      icon: Target,\n      subtitle: t('dashboard.industryAlignment'),\n      color: \"text-destructive\",\n      bgColor: \"bg-destructive/10\"\n    }\n  ];\n\n  return (\n    <section className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {cards.map((card, index) => (\n        <Card \n          key={index} \n          className=\"border border-border transition-all duration-300 hover:-translate-y-1 hover:shadow-lg\"\n          data-testid={`progress-card-${index}`}\n        >\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className={`w-12 h-12 ${card.bgColor} rounded-lg flex items-center justify-center`}>\n                <card.icon className={`${card.color} text-xl`} />\n              </div>\n              <span className={`text-2xl font-bold ${card.color}`} data-testid={`card-value-${index}`}>\n                {card.value}\n              </span>\n            </div>\n            <h3 className=\"font-semibold text-foreground mb-2\">{card.title}</h3>\n            {card.progress !== undefined ? (\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div \n                  className=\"h-2 rounded-full bg-gradient-to-r from-primary to-secondary\" \n                  style={{ width: `${card.progress}%` }}\n                  data-testid={`progress-bar-${index}`}\n                />\n              </div>\n            ) : (\n              <p className=\"text-sm text-muted-foreground\">{card.subtitle}</p>\n            )}\n          </CardContent>\n        </Card>\n      ))}\n    </section>\n  );\n}\n","size_bytes":2844},"client/src/components/dashboard/recommendations.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ChevronRight } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface RecommendationsProps {\n  user?: User;\n}\n\nexport function Recommendations({ user }: RecommendationsProps) {\n  const { t } = useTranslation();\n\n  const { data: recommendations, isLoading } = useQuery({\n    queryKey: ['/api/ai/course-recommendations'],\n    enabled: !!user,\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"border border-border\" data-testid=\"recommendations-loading\">\n        <CardContent className=\"p-6\">\n          <Skeleton className=\"h-6 w-48 mb-4\" />\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-20 w-full\" />\n            <Skeleton className=\"h-20 w-full\" />\n            <Skeleton className=\"h-20 w-full\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Mock recommendations if API doesn't return data\n  const mockRecommendations = [\n    {\n      title: \"Advanced R Programming\",\n      description: \"Focus on statistical modeling and data manipulation\",\n      nsqfLevel: 6,\n      duration: \"4 weeks\",\n      priority: 1,\n      type: \"NSQF Level 6\"\n    },\n    {\n      title: \"Industry Project\",\n      description: \"Real-world data analysis case study\", \n      duration: \"6 weeks\",\n      priority: 2,\n      type: \"Certification\"\n    },\n    {\n      title: \"Job Readiness Program\",\n      description: \"Interview prep and portfolio building\",\n      duration: \"3 weeks\", \n      priority: 3,\n      type: \"Career Support\"\n    }\n  ];\n\n  const displayRecommendations = recommendations?.length > 0 ? \n    recommendations.slice(0, 3).map((course: any, index: number) => ({\n      title: course.title,\n      description: course.description || \"Comprehensive course content\",\n      duration: course.duration || \"4 weeks\",\n      priority: index + 1,\n      type: course.nsqfLevel ? `NSQF Level ${course.nsqfLevel}` : \"Professional Course\"\n    })) : mockRecommendations;\n\n  const getBadgeColor = (priority: number) => {\n    switch (priority) {\n      case 1: return \"bg-primary/10 text-primary\";\n      case 2: return \"bg-accent/10 text-accent\";\n      case 3: return \"bg-secondary/10 text-secondary\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"recommendations-card\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-xl font-bold text-foreground mb-4\">\n          {t('dashboard.nextSteps')}\n        </h3>\n        \n        <div className=\"space-y-4\">\n          {displayRecommendations.map((recommendation, index) => (\n            <div \n              key={index}\n              className=\"p-4 border border-border rounded-lg hover:bg-muted transition-colors cursor-pointer\"\n              data-testid={`recommendation-${index}`}\n            >\n              <div className=\"flex items-start gap-3\">\n                <div className={`w-8 h-8 ${getBadgeColor(recommendation.priority)} rounded-full flex items-center justify-center text-sm font-bold`}>\n                  {recommendation.priority}\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-foreground mb-1\">\n                    {recommendation.title}\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    {recommendation.description}\n                  </p>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {recommendation.type}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {recommendation.duration}\n                    </span>\n                  </div>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-recommendation-${index}`}>\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <Button \n          variant=\"outline\" \n          className=\"w-full mt-4\"\n          data-testid=\"button-view-all-recommendations\"\n        >\n          View All Recommendations\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4583},"client/src/components/dashboard/skill-analysis.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { RefreshCw, Bot, BarChart3, Database, Code } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface SkillAnalysisProps {\n  user?: User;\n}\n\ninterface SkillGap {\n  skillName: string;\n  currentLevel: string;\n  requiredLevel: string;\n  priority: 'high' | 'medium' | 'low';\n  recommendations: string[];\n}\n\ninterface SkillGapAnalysis {\n  skillGaps: SkillGap[];\n  overallScore: number;\n  strengths: string[];\n  improvementAreas: string[];\n  careerReadiness: number;\n}\n\nexport function SkillAnalysis({ user }: SkillAnalysisProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [analysisData, setAnalysisData] = useState<SkillGapAnalysis | null>(null);\n\n  const { data: skillAnalysis, isLoading } = useQuery({\n    queryKey: ['/api/ai/analysis', user?.id],\n    enabled: false, // Don't auto-fetch, only when requested\n  });\n\n  const analyzeSkillsMutation = useMutation({\n    mutationFn: async () => {\n      const targetRole = user?.careerAspirations || \"Data Analyst\";\n      const response = await apiRequest(\"POST\", \"/api/ai/skill-analysis\", { targetRole });\n      return response.json();\n    },\n    onSuccess: (data: SkillGapAnalysis) => {\n      setAnalysisData(data);\n      toast({\n        title: \"Analysis Complete\",\n        description: \"Your skill gap analysis has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: \"Unable to analyze skills. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Skill analysis error:\", error);\n    },\n  });\n\n  const handleAnalyze = () => {\n    analyzeSkillsMutation.mutate();\n  };\n\n  const getSkillIcon = (skillName: string) => {\n    const name = skillName.toLowerCase();\n    if (name.includes('visualization') || name.includes('chart') || name.includes('tableau')) {\n      return BarChart3;\n    } else if (name.includes('machine learning') || name.includes('database') || name.includes('sql')) {\n      return Database;\n    } else if (name.includes('programming') || name.includes('python') || name.includes('code')) {\n      return Code;\n    }\n    return BarChart3;\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-destructive';\n      case 'medium': return 'text-accent';\n      case 'low': return 'text-secondary';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getProgressColor = (score: number) => {\n    if (score >= 80) return 'from-secondary to-accent';\n    if (score >= 60) return 'from-accent to-primary';\n    return 'from-destructive to-accent';\n  };\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"skill-analysis-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <Bot className=\"text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold text-foreground\">\n                {t('dashboard.aiAnalysis')}\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Personalized recommendations based on your profile\n              </p>\n            </div>\n          </div>\n          <Button \n            onClick={handleAnalyze}\n            disabled={analyzeSkillsMutation.isPending}\n            data-testid=\"button-update-analysis\"\n          >\n            {analyzeSkillsMutation.isPending ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n            )}\n            {t('dashboard.updateAnalysis')}\n          </Button>\n        </div>\n\n        {analyzeSkillsMutation.isPending && (\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-20 w-full\" />\n            <Skeleton className=\"h-20 w-full\" />\n            <Skeleton className=\"h-20 w-full\" />\n          </div>\n        )}\n\n        {!analyzeSkillsMutation.isPending && !analysisData && (\n          <div className=\"text-center py-12\">\n            <Bot className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h4 className=\"text-lg font-semibold text-foreground mb-2\">\n              No Analysis Available\n            </h4>\n            <p className=\"text-muted-foreground mb-4\">\n              Click \"Update Analysis\" to generate your personalized skill gap analysis using AI.\n            </p>\n          </div>\n        )}\n\n        {analysisData && (\n          <div className=\"space-y-4\">\n            {/* Overall Scores */}\n            <div className=\"grid grid-cols-2 gap-4 mb-6\">\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-foreground mb-1\">\n                  {analysisData.overallScore}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Overall Score</div>\n              </div>\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-foreground mb-1\">\n                  {analysisData.careerReadiness}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Career Readiness</div>\n              </div>\n            </div>\n\n            {/* Skill Gaps */}\n            {analysisData.skillGaps.slice(0, 3).map((gap, index) => {\n              const SkillIcon = getSkillIcon(gap.skillName);\n              const progressPercentage = gap.currentLevel === 'advanced' ? 90 : \n                                       gap.currentLevel === 'intermediate' ? 65 : 35;\n              \n              return (\n                <div \n                  key={index} \n                  className=\"flex items-center justify-between p-4 bg-muted rounded-lg\"\n                  data-testid={`skill-gap-${index}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                      <SkillIcon className=\"text-secondary\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-foreground\">{gap.skillName}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {gap.currentLevel} → {gap.requiredLevel}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"text-sm font-medium text-foreground capitalize\">\n                        {gap.currentLevel}\n                      </span>\n                      <span className={`text-sm ${getPriorityColor(gap.priority)}`}>\n                        {progressPercentage}%\n                      </span>\n                    </div>\n                    <div className=\"w-24 bg-border rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full bg-gradient-to-r ${getProgressColor(progressPercentage)}`}\n                        style={{ width: `${progressPercentage}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n\n            {/* Strengths and Improvement Areas */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\">\n              <div>\n                <h5 className=\"font-semibold text-foreground mb-2\">Strengths</h5>\n                <ul className=\"space-y-1\">\n                  {analysisData.strengths.slice(0, 3).map((strength, index) => (\n                    <li key={index} className=\"text-sm text-muted-foreground flex items-center\">\n                      <div className=\"w-2 h-2 bg-secondary rounded-full mr-2\" />\n                      {strength}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n              <div>\n                <h5 className=\"font-semibold text-foreground mb-2\">Focus Areas</h5>\n                <ul className=\"space-y-1\">\n                  {analysisData.improvementAreas.slice(0, 3).map((area, index) => (\n                    <li key={index} className=\"text-sm text-muted-foreground flex items-center\">\n                      <div className=\"w-2 h-2 bg-accent rounded-full mr-2\" />\n                      {area}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9179},"client/src/components/profile/profile-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { User, Save, BookOpen, Target, Clock } from \"lucide-react\";\nimport type { User as UserType } from \"@shared/schema\";\n\ninterface ProfileFormProps {\n  user?: UserType;\n}\n\nconst profileFormSchema = insertUserSchema.extend({\n  academicBackground: z.string().min(1, \"Academic background is required\"),\n  careerAspirations: z.string().min(1, \"Career aspirations are required\"),\n  learningPace: z.enum([\"slow\", \"moderate\", \"fast\"]),\n  preferredLanguage: z.enum([\"en\", \"hi\", \"ta\", \"te\"])\n});\n\ntype ProfileFormData = z.infer<typeof profileFormSchema>;\n\nexport function ProfileForm({ user }: ProfileFormProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      academicBackground: user?.academicBackground || \"\",\n      currentRole: user?.currentRole || \"\",\n      careerAspirations: user?.careerAspirations || \"\",\n      socioEconomicContext: user?.socioEconomicContext || \"\",\n      learningPace: user?.learningPace as \"slow\" | \"moderate\" | \"fast\" || \"moderate\",\n      preferredLanguage: user?.preferredLanguage as \"en\" | \"hi\" | \"ta\" | \"te\" || \"en\"\n    }\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      const response = await apiRequest(\"PUT\", \"/api/profile\", data);\n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const academicBackgrounds = [\n    \"High School\", \"Diploma\", \"Bachelor's Degree\", \"Master's Degree\", \n    \"PhD\", \"Professional Certification\", \"Self-taught\", \"Other\"\n  ];\n\n  const currentRoles = [\n    \"Student\", \"Fresh Graduate\", \"Working Professional\", \"Career Changer\",\n    \"Freelancer\", \"Entrepreneur\", \"Unemployed\", \"Other\"\n  ];\n\n  const careerOptions = [\n    \"Data Analyst\", \"Software Developer\", \"Digital Marketer\", \"Web Designer\",\n    \"Cybersecurity Analyst\", \"Cloud Engineer\", \"AI/ML Engineer\", \"Product Manager\",\n    \"Business Analyst\", \"DevOps Engineer\", \"Mobile App Developer\", \"UI/UX Designer\"\n  ];\n\n  const socioEconomicContexts = [\n    \"Urban - Metro City\", \"Urban - Tier 2 City\", \"Semi-Urban\", \"Rural\",\n    \"Low Income\", \"Middle Income\", \"High Income\", \"Student\", \"Other\"\n  ];\n\n  const learningPaces = [\n    { value: \"slow\", label: \"Slow & Steady\", description: \"3-4 hours per week\" },\n    { value: \"moderate\", label: \"Moderate\", description: \"5-8 hours per week\" },\n    { value: \"fast\", label: \"Fast Track\", description: \"10+ hours per week\" }\n  ];\n\n  if (!user) {\n    return (\n      <Card className=\"border border-border\" data-testid=\"profile-form-loading\">\n        <CardHeader>\n          <Skeleton className=\"h-6 w-48\" />\n          <Skeleton className=\"h-4 w-full\" />\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Skeleton className=\"h-10 w-full\" />\n          <Skeleton className=\"h-10 w-full\" />\n          <Skeleton className=\"h-20 w-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border border-border\" data-testid=\"profile-form-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <User className=\"h-5 w-5 text-primary\" />\n          {t('profile.basicInfo')}\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Help us personalize your learning experience by providing your background and goals.\n        </p>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Academic Background */}\n            <FormField\n              control={form.control}\n              name=\"academicBackground\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <BookOpen className=\"h-4 w-4\" />\n                    {t('profile.academicBackground')}\n                  </FormLabel>\n                  <FormControl>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <SelectTrigger data-testid=\"select-academic-background\">\n                        <SelectValue placeholder=\"Select your academic background\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {academicBackgrounds.map((background) => (\n                          <SelectItem key={background} value={background}>\n                            {background}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Current Role */}\n            <FormField\n              control={form.control}\n              name=\"currentRole\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t('profile.currentRole')}</FormLabel>\n                  <FormControl>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <SelectTrigger data-testid=\"select-current-role\">\n                        <SelectValue placeholder=\"Select your current role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {currentRoles.map((role) => (\n                          <SelectItem key={role} value={role}>\n                            {role}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Career Aspirations */}\n            <FormField\n              control={form.control}\n              name=\"careerAspirations\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <Target className=\"h-4 w-4\" />\n                    {t('profile.careerAspirations')}\n                  </FormLabel>\n                  <FormControl>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <SelectTrigger data-testid=\"select-career-aspirations\">\n                        <SelectValue placeholder=\"Select your career goal\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {careerOptions.map((career) => (\n                          <SelectItem key={career} value={career}>\n                            {career}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Socio-Economic Context */}\n            <FormField\n              control={form.control}\n              name=\"socioEconomicContext\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Location & Context</FormLabel>\n                  <FormControl>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <SelectTrigger data-testid=\"select-socio-context\">\n                        <SelectValue placeholder=\"Select your context\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {socioEconomicContexts.map((context) => (\n                          <SelectItem key={context} value={context}>\n                            {context}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Learning Pace */}\n            <FormField\n              control={form.control}\n              name=\"learningPace\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\">\n                    <Clock className=\"h-4 w-4\" />\n                    {t('profile.learningPace')}\n                  </FormLabel>\n                  <FormControl>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {learningPaces.map((pace) => (\n                        <div \n                          key={pace.value}\n                          className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                            field.value === pace.value\n                              ? 'border-primary bg-primary/5'\n                              : 'border-border hover:border-primary/50'\n                          }`}\n                          onClick={() => field.onChange(pace.value)}\n                          data-testid={`pace-${pace.value}`}\n                        >\n                          <div className=\"font-medium text-foreground\">{pace.label}</div>\n                          <div className=\"text-sm text-muted-foreground\">{pace.description}</div>\n                        </div>\n                      ))}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Preferred Language */}\n            <FormField\n              control={form.control}\n              name=\"preferredLanguage\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Preferred Language</FormLabel>\n                  <FormControl>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <SelectTrigger data-testid=\"select-preferred-language\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"hi\">हिंदी (Hindi)</SelectItem>\n                        <SelectItem value=\"ta\">தமிழ் (Tamil)</SelectItem>\n                        <SelectItem value=\"te\">తెలుగు (Telugu)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Form Actions */}\n            <div className=\"flex items-center justify-between pt-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                {form.formState.isDirty ? \"You have unsaved changes\" : \"Profile is up to date\"}\n              </div>\n              <Button \n                type=\"submit\" \n                disabled={updateProfileMutation.isPending || !form.formState.isDirty}\n                data-testid=\"button-save-profile\"\n              >\n                {updateProfileMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin\" />\n                    Saving...\n                  </div>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {t('profile.save')}\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {/* Form Validation Errors Summary */}\n            {Object.keys(form.formState.errors).length > 0 && (\n              <div className=\"p-4 bg-destructive/10 border border-destructive/20 rounded-lg\" data-testid=\"form-errors\">\n                <h4 className=\"font-medium text-destructive mb-2\">Please fix the following errors:</h4>\n                <ul className=\"text-sm text-destructive space-y-1\">\n                  {Object.entries(form.formState.errors).map(([field, error]) => (\n                    <li key={field}>• {error?.message}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":14199},"client/src/components/profile/skills-assessment.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Target, Brain, BarChart3, Database, Code, Palette, \n  TrendingUp, Plus, RefreshCw, CheckCircle, Clock \n} from \"lucide-react\";\nimport type { User, Skill, UserSkill } from \"@shared/schema\";\n\ninterface SkillsAssessmentProps {\n  user?: User;\n}\n\ninterface SkillAssessmentState {\n  skillId: string;\n  skillName: string;\n  category: string;\n  proficiencyLevel: string;\n  proficiencyScore: number;\n  isAssessed: boolean;\n}\n\nexport function SkillsAssessment({ user }: SkillsAssessmentProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [assessmentState, setAssessmentState] = useState<SkillAssessmentState[]>([]);\n  const [activeSkillId, setActiveSkillId] = useState<string>(\"\");\n\n  const { data: skills, isLoading: skillsLoading } = useQuery({\n    queryKey: ['/api/skills', selectedCategory],\n    enabled: !!user,\n  });\n\n  const { data: userSkills, isLoading: userSkillsLoading } = useQuery({\n    queryKey: ['/api/user/skills'],\n    enabled: !!user,\n  });\n\n  const updateSkillMutation = useMutation({\n    mutationFn: async ({ skillId, proficiencyLevel, proficiencyScore }: {\n      skillId: string;\n      proficiencyLevel: string;\n      proficiencyScore: number;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/user/skills\", {\n        skillId,\n        proficiencyLevel,\n        proficiencyScore\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Skill Updated\",\n        description: \"Your skill assessment has been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/skills'] });\n      \n      // Update local state\n      setAssessmentState(prev => prev.map(skill => \n        skill.skillId === variables.skillId \n          ? { ...skill, isAssessed: true, proficiencyLevel: variables.proficiencyLevel, proficiencyScore: variables.proficiencyScore }\n          : skill\n      ));\n      setActiveSkillId(\"\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to save skill assessment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const categories = [\n    \"Programming\", \"Data Analysis\", \"Web Development\", \"Mobile Development\",\n    \"Cloud Computing\", \"Cybersecurity\", \"AI & Machine Learning\", \"DevOps\",\n    \"Design\", \"Digital Marketing\", \"Project Management\", \"Business Analysis\"\n  ];\n\n  const getSkillIcon = (category: string) => {\n    const cat = category.toLowerCase();\n    if (cat.includes('programming') || cat.includes('development')) return Code;\n    if (cat.includes('data') || cat.includes('analysis')) return BarChart3;\n    if (cat.includes('database') || cat.includes('cloud')) return Database;\n    if (cat.includes('design') || cat.includes('ui')) return Palette;\n    return Target;\n  };\n\n  const getProficiencyColor = (score: number) => {\n    if (score >= 80) return 'text-secondary';\n    if (score >= 60) return 'text-accent';\n    if (score >= 40) return 'text-primary';\n    return 'text-destructive';\n  };\n\n  const getProficiencyBgColor = (score: number) => {\n    if (score >= 80) return 'bg-secondary/10 border-secondary/20';\n    if (score >= 60) return 'bg-accent/10 border-accent/20';\n    if (score >= 40) return 'bg-primary/10 border-primary/20';\n    return 'bg-destructive/10 border-destructive/20';\n  };\n\n  const getProficiencyLevel = (score: number): string => {\n    if (score >= 80) return 'advanced';\n    if (score >= 60) return 'intermediate';\n    return 'beginner';\n  };\n\n  const handleScoreChange = (skillId: string, score: number) => {\n    setAssessmentState(prev => prev.map(skill =>\n      skill.skillId === skillId \n        ? { ...skill, proficiencyScore: score, proficiencyLevel: getProficiencyLevel(score) }\n        : skill\n    ));\n  };\n\n  const handleSaveSkill = (skillId: string) => {\n    const skill = assessmentState.find(s => s.skillId === skillId);\n    if (skill) {\n      updateSkillMutation.mutate({\n        skillId: skill.skillId,\n        proficiencyLevel: skill.proficiencyLevel,\n        proficiencyScore: skill.proficiencyScore\n      });\n    }\n  };\n\n  const handleStartAssessment = (skill: Skill) => {\n    const existingUserSkill = userSkills?.find((us: UserSkill) => us.skillId === skill.id);\n    const currentScore = existingUserSkill?.proficiencyScore || 50;\n    \n    if (!assessmentState.find(s => s.skillId === skill.id)) {\n      setAssessmentState(prev => [...prev, {\n        skillId: skill.id,\n        skillName: skill.name,\n        category: skill.category,\n        proficiencyLevel: getProficiencyLevel(currentScore),\n        proficiencyScore: currentScore,\n        isAssessed: !!existingUserSkill\n      }]);\n    }\n    setActiveSkillId(skill.id);\n  };\n\n  if (!user) {\n    return (\n      <Card className=\"border border-border\" data-testid=\"skills-assessment-loading\">\n        <CardHeader>\n          <Skeleton className=\"h-6 w-48\" />\n          <Skeleton className=\"h-4 w-full\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Skeleton key={index} className=\"h-24 w-full\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const displaySkills = skills || [];\n  const filteredSkills = selectedCategory \n    ? displaySkills.filter((skill: Skill) => skill.category === selectedCategory)\n    : displaySkills.slice(0, 12); // Show first 12 skills if no category selected\n\n  const assessedSkills = assessmentState.filter(skill => skill.isAssessed);\n  const overallProgress = assessedSkills.length > 0 \n    ? Math.round(assessedSkills.reduce((sum, skill) => sum + skill.proficiencyScore, 0) / assessedSkills.length)\n    : 0;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"skills-assessment-container\">\n      {/* Assessment Overview */}\n      <Card className=\"border border-border\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5 text-primary\" />\n            Skills Assessment Overview\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Self-assess your skills to get personalized learning recommendations\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-foreground mb-1\" data-testid=\"assessed-skills-count\">\n                {assessedSkills.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Skills Assessed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-foreground mb-1\" data-testid=\"overall-progress\">\n                {overallProgress}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Average Proficiency</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-foreground mb-1\">\n                {assessedSkills.filter(s => s.proficiencyScore >= 70).length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Strong Skills</div>\n            </div>\n          </div>\n          \n          {assessedSkills.length > 0 && (\n            <div className=\"mt-6\">\n              <div className=\"flex items-center justify-between text-sm mb-2\">\n                <span className=\"text-muted-foreground\">Overall Progress</span>\n                <span className=\"font-medium\">{overallProgress}%</span>\n              </div>\n              <Progress value={overallProgress} className=\"h-3\" data-testid=\"overall-progress-bar\" />\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Skills Assessment Interface */}\n      <Tabs defaultValue=\"assess\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"skills-tabs\">\n          <TabsTrigger value=\"assess\" className=\"flex items-center gap-2\">\n            <Target className=\"h-4 w-4\" />\n            Skill Assessment\n          </TabsTrigger>\n          <TabsTrigger value=\"results\" className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-4 w-4\" />\n            My Skills ({assessedSkills.length})\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Assessment Tab */}\n        <TabsContent value=\"assess\" className=\"mt-6\">\n          <Card className=\"border border-border\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Skill Assessment</CardTitle>\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-skill-category\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Categories</SelectItem>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {skillsLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {Array.from({ length: 9 }).map((_, index) => (\n                    <Skeleton key={index} className=\"h-32 w-full\" />\n                  ))}\n                </div>\n              ) : filteredSkills.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {filteredSkills.map((skill: Skill) => {\n                    const SkillIcon = getSkillIcon(skill.category);\n                    const userSkill = userSkills?.find((us: UserSkill) => us.skillId === skill.id);\n                    const assessmentSkill = assessmentState.find(s => s.skillId === skill.id);\n                    const isActive = activeSkillId === skill.id;\n                    const isAssessed = userSkill || assessmentSkill?.isAssessed;\n\n                    return (\n                      <Card \n                        key={skill.id} \n                        className={`border transition-all ${isActive ? 'border-primary bg-primary/5' : 'border-border'}`}\n                        data-testid={`skill-card-${skill.id}`}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                                <SkillIcon className=\"h-4 w-4 text-primary\" />\n                              </div>\n                              <div>\n                                <h4 className=\"font-medium text-foreground text-sm\">{skill.name}</h4>\n                                <p className=\"text-xs text-muted-foreground\">{skill.category}</p>\n                              </div>\n                            </div>\n                            {isAssessed && (\n                              <CheckCircle className=\"h-4 w-4 text-secondary\" />\n                            )}\n                          </div>\n\n                          {userSkill && (\n                            <div className=\"mb-3\">\n                              <div className=\"flex items-center justify-between text-sm mb-1\">\n                                <span className=\"text-muted-foreground\">Current Level</span>\n                                <Badge \n                                  variant=\"outline\" \n                                  className={getProficiencyBgColor(userSkill.proficiencyScore || 0)}\n                                >\n                                  {userSkill.proficiencyLevel}\n                                </Badge>\n                              </div>\n                              <Progress \n                                value={userSkill.proficiencyScore || 0} \n                                className=\"h-2\"\n                                data-testid={`skill-progress-${skill.id}`}\n                              />\n                            </div>\n                          )}\n\n                          {isActive && (\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label className=\"text-sm font-medium\">Rate Your Proficiency</Label>\n                                <div className=\"mt-2\">\n                                  <Slider\n                                    value={[assessmentSkill?.proficiencyScore || 50]}\n                                    onValueChange={(value) => handleScoreChange(skill.id, value[0])}\n                                    max={100}\n                                    step={5}\n                                    className=\"w-full\"\n                                    data-testid={`skill-slider-${skill.id}`}\n                                  />\n                                  <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                                    <span>Beginner</span>\n                                    <span>Intermediate</span>\n                                    <span>Advanced</span>\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <div className=\"text-center\">\n                                <div className=\"text-lg font-bold text-foreground mb-1\">\n                                  {assessmentSkill?.proficiencyScore || 50}%\n                                </div>\n                                <Badge \n                                  variant=\"outline\"\n                                  className={getProficiencyBgColor(assessmentSkill?.proficiencyScore || 50)}\n                                >\n                                  {assessmentSkill?.proficiencyLevel || getProficiencyLevel(50)}\n                                </Badge>\n                              </div>\n\n                              <div className=\"flex gap-2\">\n                                <Button \n                                  size=\"sm\" \n                                  className=\"flex-1\"\n                                  onClick={() => handleSaveSkill(skill.id)}\n                                  disabled={updateSkillMutation.isPending}\n                                  data-testid={`button-save-skill-${skill.id}`}\n                                >\n                                  {updateSkillMutation.isPending ? (\n                                    <RefreshCw className=\"h-3 w-3 mr-1 animate-spin\" />\n                                  ) : (\n                                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                  )}\n                                  Save\n                                </Button>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => setActiveSkillId(\"\")}\n                                  data-testid={`button-cancel-skill-${skill.id}`}\n                                >\n                                  Cancel\n                                </Button>\n                              </div>\n                            </div>\n                          )}\n\n                          {!isActive && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"w-full\"\n                              onClick={() => handleStartAssessment(skill)}\n                              data-testid={`button-assess-skill-${skill.id}`}\n                            >\n                              {isAssessed ? (\n                                <>\n                                  <RefreshCw className=\"h-3 w-3 mr-1\" />\n                                  Update Assessment\n                                </>\n                              ) : (\n                                <>\n                                  <Plus className=\"h-3 w-3 mr-1\" />\n                                  Assess Skill\n                                </>\n                              )}\n                            </Button>\n                          )}\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Target className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                    No Skills Found\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {selectedCategory \n                      ? `No skills found in the ${selectedCategory} category.`\n                      : \"No skills available for assessment at the moment.\"\n                    }\n                  </p>\n                  {selectedCategory && (\n                    <Button variant=\"outline\" onClick={() => setSelectedCategory(\"\")}>\n                      View All Skills\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Results Tab */}\n        <TabsContent value=\"results\" className=\"mt-6\">\n          <Card className=\"border border-border\">\n            <CardHeader>\n              <CardTitle>My Skills Profile</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Overview of your assessed skills and proficiency levels\n              </p>\n            </CardHeader>\n            <CardContent>\n              {assessedSkills.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {assessedSkills.map((skill) => (\n                    <div \n                      key={skill.skillId}\n                      className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n                      data-testid={`assessed-skill-${skill.skillId}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <Target className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">{skill.skillName}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{skill.category}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"text-right min-w-[80px]\">\n                          <Badge \n                            variant=\"outline\"\n                            className={getProficiencyBgColor(skill.proficiencyScore)}\n                          >\n                            {skill.proficiencyLevel}\n                          </Badge>\n                          <div className=\"text-sm text-muted-foreground mt-1\">\n                            {skill.proficiencyScore}%\n                          </div>\n                        </div>\n                        \n                        <div className=\"w-32\">\n                          <Progress \n                            value={skill.proficiencyScore} \n                            className=\"h-2\"\n                            data-testid={`skill-result-progress-${skill.skillId}`}\n                          />\n                        </div>\n                        \n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleStartAssessment({ \n                            id: skill.skillId, \n                            name: skill.skillName, \n                            category: skill.category \n                          } as Skill)}\n                          data-testid={`button-update-skill-${skill.skillId}`}\n                        >\n                          <RefreshCw className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Clock className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                    No Skills Assessed Yet\n                  </h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Start assessing your skills to build your profile and get personalized recommendations.\n                  </p>\n                  <Button onClick={() => document.querySelector('[data-testid=\"skills-tabs\"] button')?.click()}>\n                    <Target className=\"h-4 w-4 mr-2\" />\n                    Start Assessment\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":23031},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useTranslation } from \"react-i18next\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  ChartLine,\n  User as UserIcon,\n  Route,\n  BookOpen,\n  Trophy,\n  BarChart3,\n  Settings,\n  Brain,\n  LogOut\n} from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user?: User;\n  className?: string;\n}\n\nexport function Sidebar({ isOpen, onClose, user, className }: SidebarProps) {\n  const [location] = useLocation();\n  const { t } = useTranslation();\n\n  const navigation = [\n    { name: t('nav.dashboard'), href: '/', icon: ChartLine },\n    { name: t('nav.profile'), href: '/profile', icon: UserIcon },\n    { name: t('nav.pathways'), href: '/pathways', icon: Route },\n    { name: t('nav.catalog'), href: '/catalog', icon: BookOpen },\n    { name: t('nav.achievements'), href: '/achievements', icon: Trophy },\n    { name: t('nav.industry'), href: '/industry', icon: BarChart3 },\n    { name: t('nav.settings'), href: '/settings', icon: Settings },\n  ];\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const userInitials = user?.firstName && user?.lastName \n    ? `${user.firstName[0]}${user.lastName[0]}`.toUpperCase()\n    : 'U';\n\n  const userRole = user?.careerAspirations || \"Learner\";\n\n  return (\n    <aside \n      className={cn(\n        \"fixed left-0 top-0 h-full w-72 bg-card border-r border-border z-50 transition-transform duration-300\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full md:translate-x-0\",\n        className\n      )}\n      data-testid=\"sidebar-container\"\n    >\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Brain className=\"text-primary-foreground text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\">SkillPath AI</h1>\n            <p className=\"text-sm text-muted-foreground\">Personalized Learning</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"p-4 space-y-2 flex-1\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          return (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant={isActive ? \"default\" : \"ghost\"}\n                className={cn(\n                  \"w-full justify-start gap-3 h-12\",\n                  isActive && \"bg-primary text-primary-foreground\"\n                )}\n                onClick={onClose}\n                data-testid={`nav-${item.href.slice(1) || 'dashboard'}`}\n              >\n                <item.icon className=\"h-5 w-5\" />\n                <span className=\"font-medium\">{item.name}</span>\n              </Button>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Profile Section */}\n      <div className=\"absolute bottom-4 left-4 right-4\">\n        <div className=\"bg-muted rounded-lg p-4\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={user?.profileImageUrl} alt=\"Profile picture\" />\n              <AvatarFallback>{userInitials}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"font-semibold text-foreground truncate\">\n                {user?.firstName} {user?.lastName}\n              </p>\n              <p className=\"text-sm text-muted-foreground truncate\">\n                {userRole}\n              </p>\n            </div>\n          </div>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            className=\"w-full\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            {t('nav.logout')}\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n}","size_bytes":4158},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"# skillroute","size_bytes":12},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport type { Request, Response, NextFunction } from 'express';\nimport { storage } from './storage';\n\n// JWT configuration - Require JWT_SECRET for security\nconst JWT_SECRET = process.env.JWT_SECRET;\nif (!JWT_SECRET) {\n  throw new Error('JWT_SECRET environment variable is required for security');\n}\nconst JWT_EXPIRES_IN = '7d';\n\nexport interface AuthRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    role: string;\n    surveyCompleted: boolean;\n  };\n}\n\n// JWT Authentication Middleware\nexport const authenticateJWT = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  try {\n    const token = req.cookies.vidya_token;\n    \n    if (!token) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUserById(decoded.userId);\n    \n    if (!user) {\n      res.clearCookie('vidya_token');\n      return res.status(401).json({ message: 'User not found' });\n    }\n\n    req.user = {\n      id: user.id,\n      email: user.email!,\n      role: user.role!,\n      surveyCompleted: user.surveyCompleted || false\n    };\n    \n    next();\n  } catch (error) {\n    res.clearCookie('vidya_token');\n    return res.status(401).json({ message: 'Invalid token' });\n  }\n};\n\n// Role-based access control middleware\nexport const requireRole = (...allowedRoles: string[]) => {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ message: 'Access forbidden' });\n    }\n\n    next();\n  };\n};\n\n// Survey completion middleware (for learners)\nexport const requireSurveyCompletion = (req: AuthRequest, res: Response, next: NextFunction) => {\n  if (!req.user) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n\n  if (req.user.role === 'learner' && !req.user.surveyCompleted) {\n    return res.status(403).json({ \n      message: 'Survey completion required',\n      redirectTo: '/survey'\n    });\n  }\n\n  next();\n};\n\n// Utility functions\nexport const hashPassword = async (password: string): Promise<string> => {\n  return bcrypt.hash(password, 12);\n};\n\nexport const verifyPassword = async (password: string, hash: string): Promise<boolean> => {\n  return bcrypt.compare(password, hash);\n};\n\nexport const generateToken = (userId: string): string => {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n};\n\nexport const setAuthCookie = (res: Response, token: string) => {\n  res.cookie('vidya_token', token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n  });\n};\n\nexport const clearAuthCookie = (res: Response) => {\n  res.clearCookie('vidya_token');\n};","size_bytes":2975},"server/authRoutes.ts":{"content":"import { Router } from 'express';\nimport type { Response } from 'express';\nimport { registerUserSchema, loginUserSchema } from '@shared/schema';\nimport { storage } from './storage';\nimport { \n  hashPassword, \n  verifyPassword, \n  generateToken, \n  setAuthCookie, \n  clearAuthCookie,\n  type AuthRequest,\n  authenticateJWT \n} from './auth';\n\nconst router = Router();\n\n// Register endpoint\nrouter.post('/register', async (req, res: Response) => {\n  try {\n    const validatedData = registerUserSchema.parse(req.body);\n    \n    // Check if user already exists\n    const existingUser = await storage.getUserByEmail(validatedData.email);\n    if (existingUser) {\n      return res.status(400).json({ message: 'User already exists with this email' });\n    }\n\n    // Hash password and create user\n    const passwordHash = await hashPassword(validatedData.password);\n    const user = await storage.createUser({\n      ...validatedData,\n      passwordHash\n    });\n\n    // Generate token and set cookie\n    const token = generateToken(user.id);\n    setAuthCookie(res, token);\n\n    res.status(201).json({\n      message: 'Registration successful',\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        surveyCompleted: user.surveyCompleted\n      }\n    });\n  } catch (error: any) {\n    console.error('Registration error:', error);\n    res.status(400).json({ \n      message: error.message || 'Registration failed'\n    });\n  }\n});\n\n// Login endpoint\nrouter.post('/login', async (req, res: Response) => {\n  try {\n    const { email, password } = loginUserSchema.parse(req.body);\n    \n    // Find user\n    const user = await storage.getUserByEmail(email);\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid email or password' });\n    }\n\n    // Check if account is locked (3+ failed attempts)\n    if ((user.failedLoginCount || 0) >= 3) {\n      return res.status(423).json({ \n        message: 'Account locked due to multiple failed attempts. Please contact support.' \n      });\n    }\n\n    // Verify password\n    const isValidPassword = await verifyPassword(password, user.passwordHash);\n    if (!isValidPassword) {\n      // Increment failed login count\n      await storage.updateUser(user.id, { \n        failedLoginCount: (user.failedLoginCount || 0) + 1 \n      });\n      return res.status(401).json({ message: 'Invalid email or password' });\n    }\n\n    // Reset failed login count and update last login\n    await storage.updateUser(user.id, { \n      failedLoginCount: 0,\n      lastLogin: new Date()\n    });\n\n    // Generate token and set cookie\n    const token = generateToken(user.id);\n    setAuthCookie(res, token);\n\n    res.json({\n      message: 'Login successful',\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        surveyCompleted: user.surveyCompleted\n      }\n    });\n  } catch (error: any) {\n    console.error('Login error:', error);\n    res.status(400).json({ \n      message: error.message || 'Login failed'\n    });\n  }\n});\n\n// Logout endpoint\nrouter.post('/logout', (req, res: Response) => {\n  clearAuthCookie(res);\n  res.json({ message: 'Logout successful' });\n});\n\n// Get current user info\nrouter.get('/me', authenticateJWT, (req: AuthRequest, res: Response) => {\n  res.json({\n    user: req.user\n  });\n});\n\nexport default router;","size_bytes":3457},"server/chatbotRoutes.ts":{"content":"import { Router } from 'express';\nimport type { Response } from 'express';\nimport { storage } from './storage';\nimport { aiService } from './openai';\nimport { \n  type AuthRequest,\n  authenticateJWT,\n  requireRole,\n  requireSurveyCompletion\n} from './auth';\nimport { z } from 'zod';\n\nconst router = Router();\n\n// Schema for chatbot messages\nconst chatbotMessageSchema = z.object({\n  message: z.string().min(1).max(1000),\n  conversationId: z.string().optional(),\n});\n\n// Career guidance chatbot endpoint (learners only, survey required)\nrouter.post('/career-guidance', \n  authenticateJWT, \n  requireRole('learner'), \n  requireSurveyCompletion, \n  async (req: AuthRequest, res: Response) => {\n  try {\n    const userId = req.user!.id;\n    const { message, conversationId } = chatbotMessageSchema.parse(req.body);\n\n    // Get user profile and survey data\n    const user = await storage.getUserById(userId);\n    const survey = await storage.getUserSurvey(userId);\n    const userSkills = await storage.getUserSkills(userId);\n\n    if (!user || !survey) {\n      return res.status(400).json({ \n        message: 'User profile or survey data not found' \n      });\n    }\n\n    // Get relevant NCVET/NSQF data for context\n    const qualifications = await storage.getQualifications();\n    const trainingPrograms = await storage.getTrainingPrograms();\n    const jobRoles = await storage.getJobRoles();\n\n    // Prepare context for AI\n    const context = {\n      user: {\n        academicBackground: survey.academicBackground,\n        aspirations: survey.aspirations,\n        learningPace: survey.learningPace,\n        socioEconomicContext: survey.socioEconomicContext,\n        priorSkillsFreeform: survey.priorSkillsFreeform,\n        currentSkills: userSkills\n      },\n      ncvetData: {\n        qualifications: qualifications.slice(0, 10), // Limit for token efficiency\n        trainingPrograms: trainingPrograms.slice(0, 10),\n        jobRoles: jobRoles.slice(0, 10)\n      }\n    };\n\n    // Generate AI response with career guidance\n    const aiResponse = await generateCareerGuidance(message, context);\n\n    // Save the conversation for future reference\n    await storage.saveAIAnalysis({\n      userId,\n      analysisType: 'career_guidance',\n      input: { message, conversationId },\n      output: { response: aiResponse },\n      confidence: 0.85 // Default confidence for chatbot responses\n    });\n\n    res.json({\n      response: aiResponse.response,\n      suggestions: aiResponse.suggestions,\n      conversationId: conversationId || generateConversationId()\n    });\n\n  } catch (error: any) {\n    console.error('Chatbot error:', error);\n    res.status(500).json({ \n      message: 'Failed to process your message. Please try again.' \n    });\n  }\n});\n\n// Generate career guidance using AI\nasync function generateCareerGuidance(userMessage: string, context: any) {\n  const prompt = `You are Vidya Varadhi, a career guidance assistant for Indian learners. Help users explore career paths based on NCVET qualifications and NSQF levels.\n\nUser Profile:\n- Academic Background: ${context.user.academicBackground}\n- Career Aspirations: ${context.user.aspirations}\n- Learning Pace: ${context.user.learningPace}\n- Socio-Economic Context: ${context.user.socioEconomicContext}\n- Prior Skills: ${context.user.priorSkillsFreeform}\n\nAvailable NCVET Qualifications (sample):\n${context.ncvetData.qualifications.map(q => `- ${q.code}: ${q.title} (NSQF Level ${q.nsqfLevel}, ${q.sector})`).join('\\n')}\n\nAvailable Training Programs (sample):\n${context.ncvetData.trainingPrograms.map(p => `- ${p.title} by ${p.provider} (${p.duration}, NSQF Level ${p.nsqfLevel})`).join('\\n')}\n\nJob Roles (sample):\n${context.ncvetData.jobRoles.map(j => `- ${j.title} in ${j.sector} (NSQF Level ${j.nsqfLevel}, Salary: ${j.salaryRange})`).join('\\n')}\n\nUser Message: \"${userMessage}\"\n\nProvide career guidance that:\n1. Is relevant to their background and aspirations\n2. References specific NCVET qualification codes when relevant\n3. Suggests appropriate NSQF levels based on their current skills\n4. Recommends specific training programs from the available options\n5. Mentions salary ranges and job market demand\n6. Is encouraging and culturally appropriate for Indian context\n7. Uses simple, easy to understand language\n\nRespond in a conversational, helpful tone. Keep responses under 300 words.`;\n\n  try {\n    const aiResponse = await aiService.generateCareerGuidance(prompt);\n    \n    // Extract suggestions from the response\n    const suggestions = extractCareerSuggestions(aiResponse, context.ncvetData);\n    \n    return {\n      response: aiResponse,\n      suggestions\n    };\n  } catch (error) {\n    console.error('AI service error:', error);\n    return {\n      response: \"I'm here to help with your career guidance questions. Could you please tell me more about what specific career area you're interested in exploring?\",\n      suggestions: []\n    };\n  }\n}\n\n// Extract structured career suggestions from AI response\nfunction extractCareerSuggestions(response: string, ncvetData: any) {\n  const suggestions = [];\n\n  // Look for NCVET codes mentioned in the response\n  const codePattern = /([A-Z]{3}\\/Q\\d{4})/g;\n  const mentionedCodes = response.match(codePattern) || [];\n\n  for (const code of mentionedCodes) {\n    const qualification = ncvetData.qualifications.find((q: any) => q.code === code);\n    const relatedProgram = ncvetData.trainingPrograms.find((p: any) => \n      p.qualificationCodes?.includes(code)\n    );\n    const relatedJobRole = ncvetData.jobRoles.find((j: any) => \n      j.qualificationCodes?.includes(code)\n    );\n\n    if (qualification) {\n      suggestions.push({\n        type: 'qualification',\n        code: qualification.code,\n        title: qualification.title,\n        nsqfLevel: qualification.nsqfLevel,\n        sector: qualification.sector,\n        relatedProgram: relatedProgram?.title,\n        relatedJobRole: relatedJobRole?.title\n      });\n    }\n  }\n\n  return suggestions.slice(0, 3); // Limit to top 3 suggestions\n}\n\n// Generate a simple conversation ID\nfunction generateConversationId(): string {\n  return `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\nexport default router;","size_bytes":6172},"server/surveyRoutes.ts":{"content":"import { Router } from 'express';\nimport type { Response } from 'express';\nimport { insertSurveySchema } from '@shared/schema';\nimport { storage } from './storage';\nimport { \n  type AuthRequest,\n  authenticateJWT,\n  requireRole\n} from './auth';\n\nconst router = Router();\n\n// Get user's survey (learners only)\nrouter.get('/me', authenticateJWT, requireRole('learner'), async (req: AuthRequest, res: Response) => {\n  try {\n    const userId = req.user!.id;\n    const survey = await storage.getUserSurvey(userId);\n    \n    if (!survey) {\n      return res.status(404).json({ message: 'Survey not found' });\n    }\n    \n    res.json(survey);\n  } catch (error) {\n    console.error('Error fetching survey:', error);\n    res.status(500).json({ message: 'Failed to fetch survey' });\n  }\n});\n\n// Create or update user's survey (learners only)\nrouter.post('/me', authenticateJWT, requireRole('learner'), async (req: AuthRequest, res: Response) => {\n  try {\n    const userId = req.user!.id;\n    const surveyData = insertSurveySchema.parse({\n      ...req.body,\n      userId\n    });\n\n    // Check if survey already exists\n    const existingSurvey = await storage.getUserSurvey(userId);\n    \n    let survey;\n    if (existingSurvey) {\n      // Update existing survey\n      survey = await storage.updateSurvey(userId, surveyData);\n    } else {\n      // Create new survey\n      survey = await storage.createSurvey(surveyData);\n    }\n\n    res.json({\n      message: 'Survey saved successfully',\n      survey\n    });\n  } catch (error: any) {\n    console.error('Error saving survey:', error);\n    res.status(400).json({ \n      message: error.message || 'Failed to save survey'\n    });\n  }\n});\n\n// Check if user has completed survey\nrouter.get('/status', authenticateJWT, requireRole('learner'), async (req: AuthRequest, res: Response) => {\n  try {\n    const userId = req.user!.id;\n    const survey = await storage.getUserSurvey(userId);\n    \n    res.json({\n      completed: !!survey,\n      hasBasicInfo: !!survey?.academicBackground && !!survey?.aspirations\n    });\n  } catch (error) {\n    console.error('Error checking survey status:', error);\n    res.status(500).json({ message: 'Failed to check survey status' });\n  }\n});\n\nexport default router;","size_bytes":2224},"client/src/pages/settings.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Sidebar } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Menu, User, Bell, Shield, Globe, Palette, Database,\n  Save, Download, Trash2, Eye, EyeOff\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport i18n from \"@/lib/i18n\";\n\nexport default function Settings() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showApiKey, setShowApiKey] = useState(false);\n\n  // Profile settings\n  const [profileData, setProfileData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    bio: \"\",\n    careerAspirations: \"\",\n    preferredLanguage: \"en\"\n  });\n\n  // Notification settings\n  const [notifications, setNotifications] = useState({\n    emailNotifications: true,\n    pushNotifications: true,\n    courseReminders: true,\n    achievementAlerts: true,\n    weeklyProgress: true,\n    marketingEmails: false\n  });\n\n  // Privacy settings\n  const [privacy, setPrivacy] = useState({\n    profileVisibility: \"public\",\n    progressVisibility: \"friends\",\n    allowAnalytics: true,\n    shareWithPartners: false\n  });\n\n  // System settings\n  const [system, setSystem] = useState({\n    theme: \"light\",\n    language: \"en\",\n    timezone: \"UTC\",\n    autoSave: true,\n    betaFeatures: false\n  });\n\n  const [apiKey, setApiKey] = useState(\"\");\n\n  useEffect(() => {\n    if (user) {\n      setProfileData({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n        phone: user.phone || \"\",\n        bio: user.bio || \"\",\n        careerAspirations: user.careerAspirations || \"\",\n        preferredLanguage: user.preferredLanguage || \"en\"\n      });\n      setSystem(prev => ({\n        ...prev,\n        language: user.preferredLanguage || \"en\"\n      }));\n    }\n  }, [user]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", \"/api/profile\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProfileSave = () => {\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const handleLanguageChange = (language: string) => {\n    i18n.changeLanguage(language);\n    setSystem(prev => ({ ...prev, language }));\n    setProfileData(prev => ({ ...prev, preferredLanguage: language }));\n  };\n\n  const handleExportData = () => {\n    toast({\n      title: \"Export Started\",\n      description: \"Your data export will be emailed to you within 24 hours.\",\n    });\n  };\n\n  const handleDeleteAccount = () => {\n    toast({\n      title: \"Account Deletion\",\n      description: \"Please contact support to delete your account.\",\n      variant: \"destructive\",\n    });\n  };\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"mobile-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={sidebarOpen}\n        onClose={() => setSidebarOpen(false)}\n        user={user}\n        data-testid=\"sidebar\"\n      />\n\n      {/* Main Content */}\n      <main className=\"ml-0 md:ml-72 min-h-screen\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">\n                  Settings\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Manage your account preferences and system settings\n                </p>\n              </div>\n            </div>\n            <Button \n              onClick={handleProfileSave}\n              disabled={updateProfileMutation.isPending}\n              data-testid=\"button-save-settings\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4 lg:grid-cols-6\">\n              <TabsTrigger value=\"profile\" className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Profile</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n                <Bell className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Notifications</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"privacy\" className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Privacy</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"system\" className=\"flex items-center gap-2\">\n                <Globe className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">System</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"api\" className=\"flex items-center gap-2\">\n                <Database className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">API</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"account\" className=\"flex items-center gap-2\">\n                <Trash2 className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Account</span>\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Profile Settings */}\n            <TabsContent value=\"profile\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Profile Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        value={profileData.firstName}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, firstName: e.target.value }))}\n                        data-testid=\"input-first-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        value={profileData.lastName}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, lastName: e.target.value }))}\n                        data-testid=\"input-last-name\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input\n                      id=\"phone\"\n                      value={profileData.phone}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bio\">Bio</Label>\n                    <Input\n                      id=\"bio\"\n                      value={profileData.bio}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, bio: e.target.value }))}\n                      placeholder=\"Tell us about yourself...\"\n                      data-testid=\"input-bio\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"careerAspirations\">Career Aspirations</Label>\n                    <Input\n                      id=\"careerAspirations\"\n                      value={profileData.careerAspirations}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, careerAspirations: e.target.value }))}\n                      placeholder=\"e.g., Data Scientist, Software Engineer\"\n                      data-testid=\"input-career-aspirations\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Notifications Settings */}\n            <TabsContent value=\"notifications\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Notification Preferences</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Email Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n                    </div>\n                    <Switch\n                      checked={notifications.emailNotifications}\n                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, emailNotifications: checked }))}\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Push Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">Receive browser push notifications</p>\n                    </div>\n                    <Switch\n                      checked={notifications.pushNotifications}\n                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, pushNotifications: checked }))}\n                      data-testid=\"switch-push-notifications\"\n                    />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Course Reminders</Label>\n                      <p className=\"text-sm text-muted-foreground\">Get reminders about ongoing courses</p>\n                    </div>\n                    <Switch\n                      checked={notifications.courseReminders}\n                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, courseReminders: checked }))}\n                      data-testid=\"switch-course-reminders\"\n                    />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Achievement Alerts</Label>\n                      <p className=\"text-sm text-muted-foreground\">Get notified when you earn achievements</p>\n                    </div>\n                    <Switch\n                      checked={notifications.achievementAlerts}\n                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, achievementAlerts: checked }))}\n                      data-testid=\"switch-achievement-alerts\"\n                    />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Weekly Progress Reports</Label>\n                      <p className=\"text-sm text-muted-foreground\">Receive weekly learning progress summaries</p>\n                    </div>\n                    <Switch\n                      checked={notifications.weeklyProgress}\n                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, weeklyProgress: checked }))}\n                      data-testid=\"switch-weekly-progress\"\n                    />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Marketing Emails</Label>\n                      <p className=\"text-sm text-muted-foreground\">Receive promotional content and updates</p>\n                    </div>\n                    <Switch\n                      checked={notifications.marketingEmails}\n                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, marketingEmails: checked }))}\n                      data-testid=\"switch-marketing-emails\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Privacy Settings */}\n            <TabsContent value=\"privacy\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Privacy & Security</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label>Profile Visibility</Label>\n                    <Select\n                      value={privacy.profileVisibility}\n                      onValueChange={(value) => setPrivacy(prev => ({ ...prev, profileVisibility: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-profile-visibility\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"public\">Public</SelectItem>\n                        <SelectItem value=\"friends\">Friends Only</SelectItem>\n                        <SelectItem value=\"private\">Private</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Progress Visibility</Label>\n                    <Select\n                      value={privacy.progressVisibility}\n                      onValueChange={(value) => setPrivacy(prev => ({ ...prev, progressVisibility: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-progress-visibility\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"public\">Public</SelectItem>\n                        <SelectItem value=\"friends\">Friends Only</SelectItem>\n                        <SelectItem value=\"private\">Private</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Analytics & Performance</Label>\n                      <p className=\"text-sm text-muted-foreground\">Allow us to collect usage data to improve the platform</p>\n                    </div>\n                    <Switch\n                      checked={privacy.allowAnalytics}\n                      onCheckedChange={(checked) => setPrivacy(prev => ({ ...prev, allowAnalytics: checked }))}\n                      data-testid=\"switch-analytics\"\n                    />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Share with Partners</Label>\n                      <p className=\"text-sm text-muted-foreground\">Share anonymized data with educational partners</p>\n                    </div>\n                    <Switch\n                      checked={privacy.shareWithPartners}\n                      onCheckedChange={(checked) => setPrivacy(prev => ({ ...prev, shareWithPartners: checked }))}\n                      data-testid=\"switch-share-partners\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* System Settings */}\n            <TabsContent value=\"system\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>System Preferences</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-2\">\n                    <Label>Theme</Label>\n                    <Select\n                      value={system.theme}\n                      onValueChange={(value) => setSystem(prev => ({ ...prev, theme: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-theme\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"light\">Light</SelectItem>\n                        <SelectItem value=\"dark\">Dark</SelectItem>\n                        <SelectItem value=\"system\">System</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Language</Label>\n                    <Select\n                      value={system.language}\n                      onValueChange={handleLanguageChange}\n                    >\n                      <SelectTrigger data-testid=\"select-language\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"es\">Español</SelectItem>\n                        <SelectItem value=\"fr\">Français</SelectItem>\n                        <SelectItem value=\"de\">Deutsch</SelectItem>\n                        <SelectItem value=\"hi\">हिन्दी</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Timezone</Label>\n                    <Select\n                      value={system.timezone}\n                      onValueChange={(value) => setSystem(prev => ({ ...prev, timezone: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-timezone\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"UTC\">UTC</SelectItem>\n                        <SelectItem value=\"EST\">Eastern Time</SelectItem>\n                        <SelectItem value=\"PST\">Pacific Time</SelectItem>\n                        <SelectItem value=\"GMT\">Greenwich Mean Time</SelectItem>\n                        <SelectItem value=\"IST\">India Standard Time</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Auto-save</Label>\n                      <p className=\"text-sm text-muted-foreground\">Automatically save your progress</p>\n                    </div>\n                    <Switch\n                      checked={system.autoSave}\n                      onCheckedChange={(checked) => setSystem(prev => ({ ...prev, autoSave: checked }))}\n                      data-testid=\"switch-auto-save\"\n                    />\n                  </div>\n                  <Separator />\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Beta Features</Label>\n                      <p className=\"text-sm text-muted-foreground\">Enable experimental features</p>\n                    </div>\n                    <Switch\n                      checked={system.betaFeatures}\n                      onCheckedChange={(checked) => setSystem(prev => ({ ...prev, betaFeatures: checked }))}\n                      data-testid=\"switch-beta-features\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* API Settings */}\n            <TabsContent value=\"api\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>API Configuration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"apiKey\">OpenAI API Key</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        id=\"apiKey\"\n                        type={showApiKey ? \"text\" : \"password\"}\n                        value={apiKey}\n                        onChange={(e) => setApiKey(e.target.value)}\n                        placeholder=\"sk-...\"\n                        data-testid=\"input-api-key\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => setShowApiKey(!showApiKey)}\n                        data-testid=\"button-toggle-api-key\"\n                      >\n                        {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Required for AI-powered features like skill analysis and course recommendations.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Account Management */}\n            <TabsContent value=\"account\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Account Management</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"text-lg font-medium\">Export Your Data</h3>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Download a copy of all your learning data, progress, and achievements.\n                      </p>\n                      <Button \n                        variant=\"outline\" \n                        onClick={handleExportData}\n                        data-testid=\"button-export-data\"\n                      >\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Export Data\n                      </Button>\n                    </div>\n                    <Separator />\n                    <div>\n                      <h3 className=\"text-lg font-medium text-destructive\">Danger Zone</h3>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Once you delete your account, there is no going back. This action cannot be undone.\n                      </p>\n                      <Button \n                        variant=\"destructive\" \n                        onClick={handleDeleteAccount}\n                        data-testid=\"button-delete-account\"\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete Account\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":26788}},"version":1}